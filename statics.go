package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tmpl_about_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x31\x8f\xdb\x3c\x0c\xdd\xbf\x5f\xf1\x3e\x2f\x5d\x02\x1b\x5d\x0f\xae\x81\x43\x5b\xa0\x40\x97\x02\x0d\x70\x33\x6d\xd3\xb1\x6a\x47\x12\x24\x26\x3a\xf7\x90\xff\x5e\xca\x39\xa7\x97\x1b\x3b\x89\x12\xf9\x48\xbe\x47\xf1\xe5\x05\x3d\x0f\xc6\x32\x0a\x6a\xdd\x49\x0a\x5c\x2e\xff\xe9\xa3\xf0\xd1\xcf\x24\xfa\x3c\x32\xf5\x1c\x0a\x14\x8f\x37\x3f\x50\x8f\x1f\x9b\xf5\x8e\x27\x33\x99\xa7\xc7\x7d\x5d\xe9\x4b\x76\xf4\xe6\x9c\x4f\xb5\x7c\xf3\xea\x83\x89\x90\x91\x91\xf4\xaa\x06\x09\x26\xeb\x52\xc4\xea\x92\x0f\x11\x34\xcf\x58\xab\x97\x75\xe5\x6f\xe8\x6f\x1c\x58\x9d\xa3\x4b\x1a\x85\xe4\xc2\x14\x1f\xfe\xfa\xdd\x7c\x35\xd4\x9c\x4d\xb3\x1f\x8d\x9d\xe0\x06\x44\x77\x64\xd1\xcb\x01\x8b\x3b\x21\x91\x15\x88\x43\x0a\x46\xa9\x6c\x25\x34\xfe\x2d\x74\xf1\xbc\xb6\x17\x4f\xed\x2f\xee\x04\xc6\x2a\x22\x3f\xb4\xee\x39\x63\xce\x5c\xe2\x33\x79\x23\x34\x9b\xdf\x24\xc6\x59\x74\xee\x64\x25\xfe\xff\x3e\xd5\x57\xa3\xb0\x80\xc8\xca\x35\xd3\x74\xf9\xaa\x0c\xe8\xcc\x6b\x0b\xc2\x16\x64\x7b\x70\xaf\x84\x8c\xec\xe0\x02\xba\xc0\x59\x66\x82\xe5\x74\x55\xc8\xd3\x81\x11\xcc\x61\x94\xdc\x45\xe0\x37\x65\xea\x6a\xa3\xad\xfa\x7c\x67\xf6\xda\x2c\x8e\x46\x53\xae\xb2\x92\x5d\x9c\xe5\x5d\x3e\x53\x46\xee\xd0\x91\xbd\x56\x53\x35\xc2\x35\x73\xd2\x26\x61\x1d\xa8\x5b\x59\x50\x6b\x66\x23\xcb\x9d\xf2\xfb\x6d\x58\x19\x10\x71\x8a\x8c\x9a\x30\x06\x1e\x3e\x15\xa3\x88\x7f\xa8\xaa\x9e\x82\x8a\x3c\x98\xc0\xad\x4e\xaf\xb4\x2c\x95\x0f\x2e\xeb\x17\xab\x23\x85\xa9\x77\xc9\x56\x45\xb3\x99\x75\x45\x0d\x06\xa5\x1b\x65\x99\x15\x58\xfe\x5b\xc2\xb8\x68\xc3\xcf\x45\xf3\x53\x15\xce\x04\x6f\x69\x7b\x16\x32\x73\x84\xce\x26\xff\x97\xdb\xc8\x37\xe4\x1d\xbd\xed\x5b\x26\x8a\x1a\xd0\xeb\xa0\x17\xfc\x60\xd1\xc9\x7d\xe1\x96\x67\x9a\x4a\xac\x05\xf4\xdb\xc6\x9c\xe4\x7d\xab\x29\xa5\xd2\xe7\xf8\xfe\x35\xbc\x73\x47\xe5\xba\x35\xb4\xd5\xaa\xab\x75\x17\xee\x96\x69\x70\x4e\xf2\x32\x5d\x97\x8c\x75\x70\x97\xcb\x9f\x00\x00\x00\xff\xff\xeb\x7a\x62\x99\x83\x03\x00\x00")

func tmpl_about_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_about_html,
		"tmpl/about.html",
	)
}

func tmpl_about_html() (*asset, error) {
	bytes, err := tmpl_about_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/about.html", size: 899, mode: os.FileMode(420), modTime: time.Unix(1419780507, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_base_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x30\xdc\xeb\xca\x44\x90\xcb\x62\x21\x09\x08\xb2\xd9\x60\x4f\x5b\x14\x2e\xd2\x1e\x47\xd2\x58\xa2\x43\x91\x2a\x49\xd9\x31\x5c\xff\xf7\x0e\xf5\xb2\xe4\x26\x05\x7a\xe8\x41\x20\x39\xfc\xe6\xc1\x6f\x1e\x3a\x9d\x58\x81\x5b\xa9\x91\xf1\x0a\xa1\x40\xcb\xd9\xf9\xbc\x8a\x6f\xfe\xf9\xff\x61\xf3\xe5\xc3\x23\xab\x7c\xad\xd2\x55\x3c\x2e\x04\x49\x57\x8c\xc5\x35\x7a\x60\x79\x05\xd6\xa1\x4f\x78\xeb\xb7\xd1\x5f\xfc\x72\x51\x79\xdf\x44\xf8\xb5\x95\xfb\x84\x7f\x8e\x3e\xdd\x47\x0f\xa6\x6e\xc0\xcb\x4c\x21\x67\xb9\xd1\x1e\x35\x69\xfd\xf7\x98\x60\x51\x62\xaf\xe7\xa5\x57\x98\x9e\x4e\xeb\xf3\x99\x7d\x63\xcf\xf2\x45\x3e\xdf\x6f\x62\xd1\x8b\x27\xc3\x1a\x6a\x4c\xf8\x5e\xe2\xa1\x31\xd6\xcf\x6c\x1d\x64\xe1\xab\xa4\xc0\xbd\xcc\x31\xea\x0e\x7f\x32\xa9\xa5\x97\xa0\x22\x97\x83\xc2\xe4\xb6\xf7\xa3\xa4\x7e\x61\x16\x55\xc2\x9d\x3f\x2a\x74\x15\x22\xd9\xa9\x2c\x6e\x13\x1e\xc2\x76\x7f\x0b\x51\xc3\x6b\x5e\xe8\x75\x66\x8c\x77\xde\x42\x13\x0e\xb9\xa9\xc5\x24\x10\x77\xeb\xbb\xf5\xad\xc8\x9d\xbb\xc8\xd6\xb5\x24\x94\x73\x3f\x73\xe3\x8f\x0d\x85\xef\xf1\xd5\x07\xdd\xd1\x6d\x67\xa7\x86\x49\x3d\x16\x3d\xcd\x71\x66\x8a\x63\x67\x4d\xc3\x9e\xe5\x0a\x9c\x4b\x38\x6d\x33\xb0\xac\x5f\x22\x4a\x1d\xb4\xca\x77\x3e\x09\x57\xc8\x09\x17\x98\x21\x93\x94\xcf\xfe\x6e\x79\x3b\xa8\x0f\x19\x1f\x11\x84\xc9\x5a\xef\x8d\x1e\x02\xed\x0f\xfc\x4a\xc9\x9b\xb2\x54\x48\xd4\x2b\x05\x8d\xc3\x82\xb3\x02\x3c\x0c\xe2\xe0\xb8\x97\x8f\x62\xb0\x65\x28\x91\x3f\x0e\x94\xd2\x03\xf8\x88\xac\xcc\x1c\x92\x4b\xd7\x80\x1e\x5d\x38\x1b\x19\xad\x8e\x3c\xdd\xf4\x4e\x08\x2c\x4b\x2a\x1c\xa3\x63\x11\x70\xef\x2a\x4a\x7a\x6f\x44\xd1\xf1\xf4\xf7\x03\x63\xd1\x13\x33\x93\xc0\x15\x47\x99\x05\x5d\x4c\xf9\xe5\xe9\x54\xcf\x30\x65\x43\x50\x3a\xd2\xd5\x1b\xb9\x19\x09\x1c\x73\x7c\x21\x54\x16\xa1\xd0\xdf\xa2\x31\x6e\xd5\x2c\x82\x51\x73\xb6\xb5\xb2\xac\xfc\x92\x77\x25\x53\x8a\x7b\x08\x11\x32\xd3\xd2\xfd\x7d\x58\x42\x94\xb1\xa0\xeb\x77\xd1\x0d\x94\x28\xc2\x13\x4d\xcd\xd3\x8f\xdd\xfa\xa3\x52\x2c\x5a\x35\x3b\x6d\x8d\xad\x19\xe4\x21\x97\xa3\x05\x87\x60\xf3\x8a\x33\x6a\xed\xca\xd0\xdb\x9e\x1e\x37\xd7\xc5\x16\xb4\x38\xb3\x26\x54\xd6\x00\x5f\x84\x35\xe3\x2d\x40\xa3\xd2\x9a\xb6\x59\x40\x08\x24\x75\xd3\xfa\x59\xf3\xf1\x61\x8e\x8c\xfe\xe7\x06\x42\xdf\x90\x3b\xce\x1a\x05\x39\x56\x46\x51\x83\x24\xfc\x5f\xa9\x0b\x66\x2c\xcb\x2d\x82\x47\x06\x2c\xc4\xbf\x8c\xa4\xcf\xe7\x4c\xb0\x68\x25\xd7\x66\xb5\xf4\x93\xab\xcc\x6b\x46\xdf\xa5\x7f\x9f\xcc\xcd\x1b\x65\x25\x42\x48\x57\x15\xb3\xd8\xc6\x82\x78\xea\x36\xef\xb4\x3e\x8d\x77\xa4\xd0\x69\xa4\xaf\x66\x93\x7e\x4b\x43\x6b\x98\xf4\x73\x63\x2e\xb7\xb2\x99\x13\x25\x76\xb0\x87\x5e\xca\x99\xb3\x39\x25\x6e\xe7\x04\x34\x8d\x92\x79\xd7\x95\xeb\x9d\xeb\xfa\xa3\x83\xcc\x6d\x74\xe0\x5f\x9d\xa7\xbb\xeb\x71\xba\xb4\x4e\x04\x75\x03\x91\xe6\x63\xf7\x37\x9a\xde\xf6\x3d\x00\x00\xff\xff\x34\x46\xfa\xa7\xc4\x06\x00\x00")

func tmpl_base_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_base_html,
		"tmpl/base.html",
	)
}

func tmpl_base_html() (*asset, error) {
	bytes, err := tmpl_base_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/base.html", size: 1732, mode: os.FileMode(420), modTime: time.Unix(1419780540, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_edit_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xe7\x29\x06\x1d\xf6\x96\x78\x73\xdd\xb5\x75\xd8\xa5\x39\x15\x1a\x48\xfa\x00\xe3\x68\x62\x0b\x64\x49\xc8\xa3\xb4\xc1\xf8\xdd\x3b\x72\x1a\x68\xa0\xf4\x60\xb0\x66\xbe\x9f\x99\x6f\xa6\x09\x0c\x9d\xad\x27\x50\x64\x2c\x2b\x98\xe7\x95\xd4\x98\x86\xe8\x90\xa5\xda\x13\x1a\x4a\x0a\x36\x7b\xec\xe8\x68\xd9\x51\x81\x00\xd4\xfd\x56\x3f\x09\xc3\xfa\x0e\xa6\x69\x73\xec\xed\x58\x10\x9b\x05\x32\xcf\x75\x25\xfd\x55\xc1\x9d\x43\x1a\x00\x4f\x6c\x83\x6f\x54\x35\xe2\x85\xaa\x6f\xf0\x0a\x06\xe2\x3e\x98\x46\xed\x5f\x0e\x47\xa5\x85\x29\x5c\x63\x2f\x70\x72\x38\x8e\x8d\x2a\x32\xeb\x2e\x85\x1c\x95\xae\x99\xde\x19\x13\x21\x78\x1c\xa8\x51\x6d\x30\x57\xf5\x00\x3c\x05\xcf\x29\x38\x05\x29\xbc\x49\x6d\xfb\x5b\xe9\xaf\xa6\xff\x84\x50\x66\xbc\xeb\xe8\xba\x12\xab\x4f\x53\xeb\x63\xe6\xbb\x5a\xcb\x1e\xe4\x5b\x4b\x48\x98\x1d\x43\xcc\xce\xad\x93\xed\x7a\x89\x8a\xaf\x51\xcc\xc7\xdc\x0e\x25\xb8\x0b\xba\x2c\xcf\x83\x2c\xb8\x8c\x5f\x57\x65\x92\x5b\x06\x6d\xd2\x75\xd4\x3b\x9b\x46\x11\x16\x3f\x26\xf3\xe7\x21\xb5\x9d\x40\x91\xa5\xfc\x7f\xe9\xce\x33\xfc\x1a\x0c\x8e\xfd\x5f\x78\x46\xe1\xe4\x68\x7e\xe0\xbc\x2e\xdd\xb2\x4f\xd4\x8f\xc7\x3b\x87\xc0\xe5\x78\xb7\xa3\x92\x37\xf2\xf7\x11\x00\x00\xff\xff\xf0\x51\x23\xb1\xf2\x01\x00\x00")

func tmpl_edit_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_edit_html,
		"tmpl/edit.html",
	)
}

func tmpl_edit_html() (*asset, error) {
	bytes, err := tmpl_edit_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/edit.html", size: 498, mode: os.FileMode(420), modTime: time.Unix(1419777536, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_home_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x52\xc1\x8e\xd3\x40\x0c\xbd\xf3\x15\xde\x5c\xb8\x54\x8d\xd8\x23\x0a\x91\x10\x42\x5a\x09\x4e\x68\x51\xcf\x6e\xe2\x74\x4c\xd3\x71\x34\xe3\x34\x84\xa8\xff\x8e\x27\xd3\x6e\x0b\x97\xc6\x7d\x1e\xdb\xef\x3d\x7b\x59\xa0\xa5\x8e\x3d\x41\xe1\xe4\x44\x05\x5c\x2e\xef\x0c\x53\x3a\x0d\x3d\x6a\x42\x09\x5b\x0a\x05\x14\x2f\xb7\x34\x40\xe5\x3e\xd4\x3b\xea\x1b\x43\x40\x05\x76\x7c\xe4\xdd\xe7\xd7\xa7\xaa\x34\x3c\xa5\x5b\x3e\xa7\xaf\x45\x43\xfd\xea\x08\x26\x7b\x00\x93\xa3\x40\xe0\x45\x1d\xfb\x03\x70\x84\x4e\x02\x9d\x29\x6c\x20\xfd\xce\x6f\xb0\xcf\x20\xfa\x36\x87\x09\xc3\x7e\xc2\x39\x6e\xab\x72\x78\xeb\xfb\x62\xdd\xde\x47\x70\x32\x01\x2b\x4c\x12\x8e\xf1\xe3\x3d\x2f\x7d\x0e\x2c\xec\xd9\x38\xb0\x3f\x82\x74\x10\x8d\x71\x1e\x34\xcb\x08\x13\x7a\x4d\xfc\xa7\xc0\xa6\x14\xf7\x32\xaa\x8d\xb0\xf7\x8f\xa5\xf3\x60\x1a\x4d\x43\x1c\xf7\xbf\xa8\x51\x60\x6f\x15\x09\xd8\xcb\xef\x54\x73\xa6\x2d\x7c\xc1\x81\x15\x7b\xfe\x83\xca\xe2\xa1\x91\xd1\x6b\x7c\xfa\xbf\xd5\x57\xb6\xb2\x00\x91\xcc\x10\x87\x0a\x92\xfe\x9a\x02\x3c\xd3\x4a\x41\xc9\xaf\xaa\xa9\x35\x41\xac\x1b\x90\x00\x4d\xa0\xb4\x05\x34\x2b\xa6\x6c\xe3\x80\x07\x82\xc0\x07\xa7\x89\x45\xa0\x87\x31\x55\x79\x93\x6d\xfe\x7c\x23\x1a\x8c\x2c\x9c\xd8\x5a\x6a\x9a\x87\x7e\x16\x4f\xc9\xd9\x79\xdd\xc5\x06\x1a\xf4\x79\x9a\xb9\x11\x72\xe7\xc9\x48\xda\x92\x00\x9b\x55\x05\xee\xb9\x67\x9d\x1f\x9c\x77\xcf\xf5\x0f\x6a\xc8\x9c\xfb\x39\xb4\xc6\x2d\xda\xd6\x9f\xaf\xb9\xf1\x3a\x7e\x59\x02\x7a\x6b\xb6\xfd\xce\x51\xd7\x8b\xb9\x79\x50\x21\xb8\x40\xdd\xa7\xa2\x4c\xd3\xca\x65\xd9\x5e\x2e\x45\xbd\x7e\xaa\x12\xeb\xbb\x96\x65\x21\xdf\x5e\x4b\xab\x32\x37\xae\xca\xf5\xb0\xfe\x39\xcf\x4e\x44\xd3\x79\xe6\xb3\xb5\x1a\x8b\xfe\x06\x00\x00\xff\xff\xdc\x5f\x29\x3c\xd4\x02\x00\x00")

func tmpl_home_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_home_html,
		"tmpl/home.html",
	)
}

func tmpl_home_html() (*asset, error) {
	bytes, err := tmpl_home_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/home.html", size: 724, mode: os.FileMode(420), modTime: time.Unix(1419780434, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_view_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xcd\x6e\xdb\x30\x0c\xbe\xf7\x29\x08\x1e\x76\x4b\xbc\x5e\x37\xc7\x87\x6d\xe8\x69\xc0\x0a\x34\x3b\x0d\x3b\x30\x16\x13\x09\x93\x25\x41\xa2\xd3\x05\x81\xdf\x7d\x54\x1a\x77\x35\x10\xf4\x60\xc0\xe2\xc7\xef\x47\x14\xcf\x67\x30\xbc\x77\x81\x01\x8f\x8e\x9f\x11\xa6\xe9\x4e\x6b\xc2\x43\xf2\x24\x5a\xb5\x4c\x86\x33\xc2\xfa\x91\x0e\xbc\x75\xe2\xb9\xb6\x00\xb4\xf6\xbe\x3b\x9f\xd7\x5b\xeb\x4a\x45\xd6\x17\x68\x9a\xda\x46\xeb\x77\x15\x4f\xe0\xcc\x06\xd9\x38\x59\x79\x17\xfe\x60\xf7\xab\x25\xb0\x99\xf7\x1b\x6c\x6a\xb5\xb9\xc1\xc6\xae\x22\x6d\x43\xdd\xef\xb6\x49\x2f\x3a\xc6\x1d\xff\x2b\xed\x63\x1e\x10\x7a\x4f\xa5\x6c\xd0\x3a\xc3\xd8\x69\x4f\x75\x7b\x2b\x9f\x54\xf2\xb6\x7c\x4f\xa1\x67\xbf\x30\x50\x72\x55\x05\xea\xc5\xc5\xa0\xec\x42\xc7\xdb\x6c\x18\x58\x6c\xd4\x28\x8f\x3f\x9e\xb6\x57\xe3\x6b\xc0\x6b\xa2\x2a\xb4\x3a\xe4\x38\x26\xec\x5a\xe1\xbf\x42\x99\x09\x02\x0d\xbc\xc1\x5d\x34\x27\x5c\x34\xf6\x31\x48\x8e\x1e\x21\xc7\x67\xad\xdd\x7f\xc4\xc5\x44\xbf\x28\xa1\x0e\x74\xd6\xe9\xda\x46\xad\x5e\x6d\x5d\x48\xa3\xcc\x7a\x3b\x09\xa0\xdf\x4a\xdf\x92\x46\x2f\x90\x46\xef\x57\xd9\x1d\xac\x20\xc8\x29\xa9\x7d\x19\x77\x83\xd3\xd3\x91\xfc\xa8\xc7\x27\xbd\xe4\x3c\xbb\xa6\xa6\xa9\xff\xed\x2e\xcf\x26\xd7\xc9\xd7\x40\xdf\x5c\xd1\x5d\x38\xcd\x71\x5e\xe1\xda\x9c\xba\x07\x97\x8b\xc6\xd0\x7c\xc2\xe6\x13\xbc\xbd\xc0\x83\xca\x92\x68\xf9\xeb\x05\x9d\x26\xf8\x30\x18\x2a\xf6\x33\x7c\x27\xe5\x8c\xc9\xbc\xc3\xf9\x79\x41\xab\xa1\x3e\xd3\x62\x23\xf7\x31\x4a\xdd\xc8\x97\x4d\xe5\x60\xf4\xef\x5f\x00\x00\x00\xff\xff\xb6\xc7\x15\x0c\xc7\x02\x00\x00")

func tmpl_view_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_view_html,
		"tmpl/view.html",
	)
}

func tmpl_view_html() (*asset, error) {
	bytes, err := tmpl_view_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/view.html", size: 711, mode: os.FileMode(420), modTime: time.Unix(1419777540, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _js_application_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\xd1\x4a\xc3\x30\x14\x86\xef\xfb\x14\x07\xbc\x48\x0a\xda\x17\x10\x6f\xc4\x09\xc2\x90\x81\x4f\x10\x4e\x4e\x35\x2c\x4d\x66\x9a\x0c\x86\xf4\xdd\xcd\xa9\x64\xc6\x6e\xa2\x37\xeb\x4d\x43\xf2\xff\xdf\xf9\xff\x23\xfb\xe4\x30\x1a\xef\x64\x0b\x1f\x0d\xe4\x6f\xaf\x02\x90\x36\x71\x6d\xdc\x16\xee\x40\x7b\x4c\x03\xb9\xd8\xbd\x27\x0a\x87\x17\xb2\x84\xd1\x07\x29\xae\x58\x73\x63\x59\xa4\x44\x7b\xdb\xcc\x5e\xd3\x83\x2c\xde\xc2\x5b\x32\x37\x35\xf4\x95\xe2\xca\x12\x1f\xef\x0f\x4f\x5a\x8a\x23\x94\x91\x4b\xf7\xa3\x0f\xc3\x9f\xe6\x3e\x8b\x96\x66\x54\x0e\xc9\xfe\xab\x10\xdb\x61\xf7\x55\xa9\x20\x4a\xf2\x4e\x69\xbd\xda\x67\xeb\xda\x8c\x91\x1c\x65\x13\x5a\x83\x5b\x71\x0d\xc7\x2d\x12\xbf\xd7\xd5\x67\x00\x5f\x76\xbb\x30\xff\x1f\xa8\x57\xc9\x46\x59\x0d\xa8\x87\x6c\x3a\xb4\x6a\x1c\x9f\xd5\x40\x39\xac\x78\x33\x9a\xc4\xa9\x92\x57\xf1\x53\x58\x89\xa6\x0a\xfd\x5d\xfd\xe2\xe9\x4f\x33\xfd\x12\xfe\x4c\xcd\x33\xe9\xa7\x66\x6a\xf3\x98\xcf\x00\x00\x00\xff\xff\xed\xc3\x11\x17\xa1\x02\x00\x00")

func js_application_js_bytes() ([]byte, error) {
	return bindata_read(
		_js_application_js,
		"js/application.js",
	)
}

func js_application_js() (*asset, error) {
	bytes, err := js_application_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/application.js", size: 673, mode: os.FileMode(420), modTime: time.Unix(1419176615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/about.html": tmpl_about_html,
	"tmpl/base.html": tmpl_base_html,
	"tmpl/edit.html": tmpl_edit_html,
	"tmpl/home.html": tmpl_home_html,
	"tmpl/view.html": tmpl_view_html,
	"js/application.js": js_application_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"js": &_bintree_t{nil, map[string]*_bintree_t{
		"application.js": &_bintree_t{js_application_js, map[string]*_bintree_t{
		}},
	}},
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"about.html": &_bintree_t{tmpl_about_html, map[string]*_bintree_t{
		}},
		"base.html": &_bintree_t{tmpl_base_html, map[string]*_bintree_t{
		}},
		"edit.html": &_bintree_t{tmpl_edit_html, map[string]*_bintree_t{
		}},
		"home.html": &_bintree_t{tmpl_home_html, map[string]*_bintree_t{
		}},
		"view.html": &_bintree_t{tmpl_view_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

