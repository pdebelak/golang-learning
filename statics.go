package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tmpl_about_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4e\xc3\x30\x10\x44\xef\x7c\xc5\xc8\x17\x6e\xb1\xb8\x22\x13\xa9\xdf\x40\xa5\x9e\xb7\x78\x53\x9b\xa4\xb6\x65\x6f\x31\x55\xd5\x7f\xc7\x09\x24\x12\xd7\x9e\x32\x3b\xa3\x99\xc8\xef\x76\x83\xe5\xc1\x07\x86\xa2\x63\xbc\x88\xc2\xfd\xfe\xd4\x4c\xe1\x73\x9a\x48\x9a\xed\x98\x2c\x67\x05\xb5\xdb\x72\xc0\xb8\x97\x7e\xb9\x71\xf0\xa3\x3f\xec\xf6\x46\x37\x67\x0e\xac\xff\x9a\xbf\x4d\xa5\xfe\x2f\x83\x2f\x10\xc7\xa8\xed\x6c\x82\x04\x63\x88\xb5\x60\x89\xe4\xb9\x80\xa6\x09\xcb\xdf\x3b\xa3\xd3\xd6\xde\xaf\x95\x44\x27\x2e\xb8\x14\x86\x21\xb8\xcc\xc3\x9b\x72\x22\xe9\x55\x6b\x4b\xd9\x87\xd3\xe0\x33\x1f\xdb\x46\x17\x58\x74\xca\xf1\x93\x3f\xa4\xe8\x33\xe5\xd1\xc6\x1a\xb4\xea\x57\x69\x34\xf5\x18\x62\x46\x91\xeb\xd4\x8a\xdd\x63\x83\xe5\x1a\x84\xbe\x55\xff\xce\x0c\xc7\x99\xb7\x59\xcb\x42\x7e\x2a\x88\x01\x2e\x56\x48\x44\xcd\xbe\x31\x5c\x9b\xeb\xf3\x8c\x5e\x28\xfd\xc3\x3c\xc4\x28\x33\xe6\x5f\xfc\x1c\x6c\x53\x3f\x01\x00\x00\xff\xff\xe3\x0c\x4c\xbe\x9d\x01\x00\x00")

func tmpl_about_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_about_html,
		"tmpl/about.html",
	)
}

func tmpl_about_html() (*asset, error) {
	bytes, err := tmpl_about_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/about.html", size: 413, mode: os.FileMode(420), modTime: time.Unix(1419135536, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_base_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\x0f\x50\xbf\x80\x62\x28\xdb\x60\xb7\xed\x50\x28\x3b\xba\x8e\x4a\x9c\x3a\x76\x88\xd5\xb0\x90\xe5\xdd\x67\xc7\xed\xe8\x60\x27\x09\xf9\xf7\xff\x4b\xdf\xb2\x40\x43\x67\xeb\x09\x44\x4b\xba\xa1\x51\xc0\xba\x56\xf8\xf4\xf2\xfe\x7c\xf8\xfc\x78\x85\x96\x7b\xa7\x2a\xbc\x97\x24\x51\x15\x00\xb2\x65\x47\x6a\x59\x76\xeb\x0a\xdf\x70\xb4\x17\x7b\xdc\x1f\x50\x96\x71\x16\x38\xeb\x2f\x30\x92\xab\x45\xe4\xd9\x51\x6c\x89\x58\x00\xcf\x03\xd5\x82\xe9\x8b\xa5\x89\x51\x40\x3b\xd2\xb9\x16\xb9\x97\xbd\xb6\x7e\x97\x87\x29\x46\x96\x1c\x3c\x85\x66\xde\xdc\xbc\x9e\x72\x4d\xdd\xd5\x95\x66\x8b\x50\xa8\xef\x16\x42\xbd\x85\x9e\x50\x6a\x85\x32\x3d\xfc\xab\xd1\xa7\x70\x65\xa1\xf6\xb9\xfc\x55\xa2\x2c\xbe\x28\x6f\x49\xd8\xd8\x09\x8c\xd3\x31\xd6\xc2\x04\xcf\x69\xb9\x84\x46\x55\x09\x17\xf9\x26\x23\xaa\x1e\xc8\x9d\x43\xe0\x1b\xb9\xec\x91\xfe\x6e\x1e\xd1\x8c\x76\xe0\xc7\xa3\x3b\x3d\xe9\x32\x15\x10\x47\x93\x76\xea\xa2\xd4\xc3\xe0\xac\xd1\x6c\x83\xdf\x75\xe9\x7e\x94\x45\x92\x41\x14\x02\x09\xc8\xc6\xff\x37\xfd\x27\x00\x00\xff\xff\x1f\xd6\x71\x70\xb6\x01\x00\x00")

func tmpl_base_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_base_html,
		"tmpl/base.html",
	)
}

func tmpl_base_html() (*asset, error) {
	bytes, err := tmpl_base_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/base.html", size: 438, mode: os.FileMode(420), modTime: time.Unix(1419174573, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_edit_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xc1\x4e\xc3\x30\x0c\x86\xef\x7b\x0a\xcb\x77\xd6\xc1\x89\x43\x9a\x03\x88\x9d\x90\x98\xb4\xf1\x00\x59\xe3\xae\x91\xda\x24\x4a\xdd\xc2\x54\xf5\xdd\x71\x3a\x10\x9b\x84\xb8\xa5\xf6\xf7\xfd\xb2\xeb\x69\x02\x4b\xb5\xf3\x04\x48\xd6\x31\xc2\x3c\xaf\xa4\xc6\xd4\xc5\xd6\xb0\x54\x1b\x32\x96\x12\xc2\x7a\x67\x4e\x74\x70\xdc\x52\x46\x00\x54\x73\xaf\x5f\xc4\x70\xfe\x04\xd3\xb4\x3e\x34\xae\xcf\xc4\x7a\x41\xe6\x59\x15\xd2\x5f\x65\xae\x0e\xa9\x03\x53\xb1\x0b\xbe\xc4\xa2\x37\x23\x15\x7f\xf0\x08\x1d\x71\x13\x6c\x89\xbb\xb7\xfd\x01\xb5\x98\xe2\x5a\x37\x6a\xc5\xf4\xc9\x26\x91\x01\x6f\x3a\x2a\xf1\x18\xec\x19\x21\x85\x8f\xbe\xc4\x87\x0d\x42\x15\x5a\x79\x3d\x6e\x50\x5f\xc7\x3e\x09\x95\xa7\xf8\x91\xb5\x2a\x72\xd8\x55\xac\xf3\x71\x60\xe0\x73\x94\xcc\x7e\x38\x76\x79\xf9\xd1\xb4\x83\x7c\xee\x65\x48\xfc\x35\x54\x91\x77\xb8\x6c\x73\x4c\x5a\x45\xbd\x75\xa9\x67\xa8\x24\x97\xc9\xc2\xdd\xcd\x0f\xd8\x0a\x6b\x58\xea\xcf\x4b\x3b\x0f\x11\x97\x94\xa8\x5f\x8d\x58\x43\xb4\xff\x59\xef\x4b\xfb\xdb\xba\xb9\x44\x1d\x02\xe7\x4b\x5c\x2e\x44\xde\xca\xeb\x2b\x00\x00\xff\xff\x23\xe7\x40\xea\xbf\x01\x00\x00")

func tmpl_edit_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_edit_html,
		"tmpl/edit.html",
	)
}

func tmpl_edit_html() (*asset, error) {
	bytes, err := tmpl_edit_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/edit.html", size: 447, mode: os.FileMode(420), modTime: time.Unix(1419175888, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_home_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x52\xc1\x8a\xdb\x40\x0c\xbd\xf7\x2b\xb4\xbe\xf4\x12\x62\xba\xc7\xe2\x1a\x7a\x28\x2c\xb4\xf4\x50\x52\x72\xd6\xda\xb2\x47\xc4\x99\x31\x63\x25\x83\x31\xf9\xf7\x4a\x9e\x64\xb3\xcd\x5e\x3c\xf2\x93\xe6\x3d\xe9\x8d\x96\x05\x5a\xea\xd8\x13\x14\x2e\x1c\xa9\x80\xcb\xe5\x93\x62\x42\xc7\x71\x40\x31\x94\xb0\xa5\x58\x40\xf1\x72\x4b\x03\x54\xee\x4b\xbd\xa7\xa1\x51\x04\x24\xc0\x9e\x0f\xbc\xff\xbe\x7b\xaa\x4a\xc5\x2d\xdd\xf2\xd9\x4e\x8d\xc6\x7a\xe7\x08\x92\x16\x40\x72\x14\x09\x7c\x10\xc7\xbe\x07\x9e\xa0\x0b\x91\xce\x14\x37\x60\xdf\xf9\x0d\xf6\x19\x44\xdf\xe6\xd0\x30\x1c\x12\xce\xd3\xb6\x2a\xc7\x37\xde\x17\x65\xfb\x3c\x81\x0b\x09\x58\x20\x85\x78\x98\xbe\xde\xf3\x61\xc8\x81\x86\x03\x6b\x0f\xec\x0f\x10\x3a\x98\xb4\xe3\x2c\x34\x87\x13\x24\xf4\x62\xfd\xa7\xc8\x3a\x29\xbe\x86\x93\xa8\x84\xd6\xbf\xbb\xfa\x1b\xcf\xdc\x9b\x11\x5a\x57\x21\xb8\x48\xdd\xb7\xa2\x1c\xb1\xa7\x72\xe7\x50\x8c\xb9\x2f\xea\x07\xa0\x2a\xb1\xfe\xc0\xf4\x83\x45\x1d\x80\x89\xd4\x0f\x2d\x84\x60\xbf\x3a\x00\x9e\x69\xed\x40\xc8\xaf\x43\x53\xab\xf3\xb0\x6c\x20\x44\x68\x22\x99\x36\xaa\x13\x29\xbb\x68\x42\x10\xb9\x77\xda\xb9\x19\xfa\x74\x97\xa9\xca\xdb\xd4\x6a\xcf\x4f\xa2\x11\xd8\xc3\x91\x95\x52\x4c\x0f\xfd\x1c\x3c\x99\xb1\xf3\xfa\x14\x1b\x68\xd0\x67\x35\x35\x23\x66\xe6\xa4\x4d\xea\x1b\x01\x36\x4d\x38\x79\xc1\x57\x1e\x58\xe6\x77\xc6\xbb\xe7\xfa\x0f\x35\xa4\xc6\xfd\x1d\x5b\xed\x6d\xd2\x47\x7f\xbe\xe6\x4e\x57\xf9\x65\x89\xe8\x95\x6c\xfb\x8b\x27\x59\x17\xe6\xe6\xc1\x83\x83\xcb\xb2\xbd\x5c\x8a\x7a\x3d\xcc\xb3\xfb\x2c\xcb\x42\xbe\xbd\x5e\xad\xca\x4c\x5c\x95\xeb\x5e\xfd\xb7\x9d\x5d\x08\x62\xdb\x99\xb7\x56\xef\x68\xf4\x2f\x00\x00\xff\xff\x82\xb9\x96\xc4\xd3\x02\x00\x00")

func tmpl_home_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_home_html,
		"tmpl/home.html",
	)
}

func tmpl_home_html() (*asset, error) {
	bytes, err := tmpl_home_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/home.html", size: 723, mode: os.FileMode(420), modTime: time.Unix(1419177865, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_view_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\x3d\x6f\xa3\x40\x10\xed\xfd\x2b\x46\xdb\xdb\xf8\xae\xba\x62\xd9\xe2\xee\xe4\xea\xa4\xb3\x64\xa7\x8a\x52\x8c\xd9\x21\xac\x02\xec\x0a\x06\x1c\x0b\xf1\xdf\x33\x8b\x71\x62\x24\x2b\xdd\xfa\xbd\x79\x1f\x1e\x66\x18\xc0\x52\xee\x6a\x02\xd5\x3b\x3a\x2b\x18\xc7\x95\x60\x4c\x55\x28\x91\x05\x2d\x08\x2d\x35\x0a\x36\x7b\x7c\xa5\xa3\xe3\x92\xe2\x08\x80\x2e\x7e\x98\x61\xd8\x1c\x0b\xd7\x46\x66\x33\x51\xe3\xa8\x13\xc1\x57\x91\x0f\xe0\x6c\xaa\xc8\x3a\x5e\x97\xae\x7e\x53\xe6\x59\x23\x14\x0d\xe5\xa9\x4a\x22\x9a\x3c\x50\x2b\x13\x19\x9d\xa0\x79\xd1\x49\xb8\xfa\x58\xd7\x7f\x39\xe5\xbe\xa9\x14\x64\x25\xb6\x6d\xaa\x0a\x67\x49\x19\x99\x89\x69\xf7\xf6\x41\x2c\x1f\xdb\x67\x58\x67\x54\x2e\x02\x44\x1c\x5d\x01\x33\x76\xbe\x16\x75\x8b\xfd\x63\x35\x54\xc4\x85\x97\x2a\xfb\xff\x87\xe3\x1c\x7c\x2d\x68\x34\xd3\x3b\x63\x43\x08\x35\x56\x94\xaa\x93\xb7\x17\x05\x8d\x3f\x4b\xcd\x9f\x5b\x69\xec\x4b\x79\xfd\xda\xaa\xc5\xce\x7e\xcb\x54\x5c\xd9\x4d\x6c\x74\x12\xcd\x16\xc6\xae\x0e\x1d\x03\x5f\x82\xb8\xb6\xdd\xa9\x72\xac\xa0\xc7\xb2\x93\x9f\x07\x29\xaa\xee\x35\x3a\x89\xff\x24\xbe\x67\x70\xde\x5f\x0c\xfd\xeb\x5a\xf9\xa2\x97\x5b\xe4\x27\x7d\x6a\x8c\x2c\x6f\xe7\x9a\x96\x21\x93\x0e\x4c\x16\xd6\x70\xdf\x72\x27\x9e\xc8\x82\xff\x99\xe8\xa8\x0e\x53\x46\x30\xff\x50\x54\x5d\xb0\xdf\xa9\x9e\x26\x7a\x56\x2d\x4e\x2b\xf7\x9e\xe3\x69\x5d\x4f\x8e\x6a\x2b\xaf\x8f\x00\x00\x00\xff\xff\x6e\x00\x25\xdf\x90\x02\x00\x00")

func tmpl_view_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_view_html,
		"tmpl/view.html",
	)
}

func tmpl_view_html() (*asset, error) {
	bytes, err := tmpl_view_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/view.html", size: 656, mode: os.FileMode(420), modTime: time.Unix(1419176047, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _js_application_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\xd1\x4a\xc3\x30\x14\x86\xef\xfb\x14\x07\xbc\x48\x0a\xda\x17\x10\x6f\xc4\x09\xc2\x90\x81\x4f\x10\x4e\x4e\x35\x2c\x4d\x66\x9a\x0c\x86\xf4\xdd\xcd\xa9\x64\xc6\x6e\xa2\x37\xeb\x4d\x43\xf2\xff\xdf\xf9\xff\x23\xfb\xe4\x30\x1a\xef\x64\x0b\x1f\x0d\xe4\x6f\xaf\x02\x90\x36\x71\x6d\xdc\x16\xee\x40\x7b\x4c\x03\xb9\xd8\xbd\x27\x0a\x87\x17\xb2\x84\xd1\x07\x29\xae\x58\x73\x63\x59\xa4\x44\x7b\xdb\xcc\x5e\xd3\x83\x2c\xde\xc2\x5b\x32\x37\x35\xf4\x95\xe2\xca\x12\x1f\xef\x0f\x4f\x5a\x8a\x23\x94\x91\x4b\xf7\xa3\x0f\xc3\x9f\xe6\x3e\x8b\x96\x66\x54\x0e\xc9\xfe\xab\x10\xdb\x61\xf7\x55\xa9\x20\x4a\xf2\x4e\x69\xbd\xda\x67\xeb\xda\x8c\x91\x1c\x65\x13\x5a\x83\x5b\x71\x0d\xc7\x2d\x12\xbf\xd7\xd5\x67\x00\x5f\x76\xbb\x30\xff\x1f\xa8\x57\xc9\x46\x59\x0d\xa8\x87\x6c\x3a\xb4\x6a\x1c\x9f\xd5\x40\x39\xac\x78\x33\x9a\xc4\xa9\x92\x57\xf1\x53\x58\x89\xa6\x0a\xfd\x5d\xfd\xe2\xe9\x4f\x33\xfd\x12\xfe\x4c\xcd\x33\xe9\xa7\x66\x6a\xf3\x98\xcf\x00\x00\x00\xff\xff\xed\xc3\x11\x17\xa1\x02\x00\x00")

func js_application_js_bytes() ([]byte, error) {
	return bindata_read(
		_js_application_js,
		"js/application.js",
	)
}

func js_application_js() (*asset, error) {
	bytes, err := js_application_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/application.js", size: 673, mode: os.FileMode(420), modTime: time.Unix(1419176615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _css_main_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xd1\x6a\xc3\x30\x0c\x45\x9f\x97\xaf\x10\x8c\xbd\x94\xb9\x04\xc6\x18\xb8\x5f\xa3\xc6\x4a\x22\xe6\xca\xc1\x51\xba\x74\x63\xff\x3e\xcb\x2b\x21\xd0\x37\x23\xdd\x73\x74\x3d\xea\x25\xc2\x4f\x03\x70\x4e\xab\x9b\xf9\x9b\x65\xf0\xe5\x9d\x03\x65\x57\x46\x27\xdb\x60\xf7\x39\xe4\xb4\x48\x70\x5d\x8a\x29\x7b\x78\xee\x7b\x3a\x35\xbf\x4d\x73\x78\x85\x83\x3f\x53\x9f\x32\xd9\x0b\x7b\xa5\xfc\x60\x63\x19\x29\xb3\x56\x20\xf0\xf5\xd8\x25\x51\x64\xb9\x27\xbf\x38\xe8\xe8\xe1\xe3\xfd\xc5\x6e\x5d\x30\x0f\x2c\x1e\x5a\xc0\x45\x93\x4d\x26\x0c\xa1\x6a\xde\xda\x69\x85\xb6\x5a\x04\xaf\x95\x55\x5a\xd5\x61\xe4\xa1\x10\x1d\x49\x39\xbe\xad\x97\xff\x5f\x6d\x74\x6b\xae\xc8\xb3\xba\x59\x6f\x91\x3c\x48\x12\xda\xa7\x23\x57\x20\xf0\x3c\x45\xbc\x59\xeb\xc8\x96\xd8\x77\xb2\x0a\x95\x39\x8e\x1c\xa8\xe4\x9f\xb6\xf8\x5d\xf7\x17\x00\x00\xff\xff\x1e\xdb\x8e\x60\x4f\x01\x00\x00")

func css_main_css_bytes() ([]byte, error) {
	return bindata_read(
		_css_main_css,
		"css/main.css",
	)
}

func css_main_css() (*asset, error) {
	bytes, err := css_main_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "css/main.css", size: 335, mode: os.FileMode(420), modTime: time.Unix(1419176115, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/about.html": tmpl_about_html,
	"tmpl/base.html": tmpl_base_html,
	"tmpl/edit.html": tmpl_edit_html,
	"tmpl/home.html": tmpl_home_html,
	"tmpl/view.html": tmpl_view_html,
	"js/application.js": js_application_js,
	"css/main.css": css_main_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"css": &_bintree_t{nil, map[string]*_bintree_t{
		"main.css": &_bintree_t{css_main_css, map[string]*_bintree_t{
		}},
	}},
	"js": &_bintree_t{nil, map[string]*_bintree_t{
		"application.js": &_bintree_t{js_application_js, map[string]*_bintree_t{
		}},
	}},
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"about.html": &_bintree_t{tmpl_about_html, map[string]*_bintree_t{
		}},
		"base.html": &_bintree_t{tmpl_base_html, map[string]*_bintree_t{
		}},
		"edit.html": &_bintree_t{tmpl_edit_html, map[string]*_bintree_t{
		}},
		"home.html": &_bintree_t{tmpl_home_html, map[string]*_bintree_t{
		}},
		"view.html": &_bintree_t{tmpl_view_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

