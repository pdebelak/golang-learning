package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tmpl_about_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xc1\x4e\xc3\x30\x10\x44\xef\x7c\xc5\xc8\x17\x6e\xb1\xb8\x22\x13\xa9\xdf\x40\xa5\x9e\xb7\x78\x53\x9b\xa4\xb6\x65\x6f\x31\x55\xd5\x7f\xc7\x09\x24\x12\xd7\x9e\x32\x3b\xa3\x99\xc8\xef\x76\x83\xe5\xc1\x07\x86\xa2\x63\xbc\x88\xc2\xfd\xfe\xd4\x4c\xe1\x73\x9a\x48\x9a\xed\x98\x2c\x67\x05\xb5\xdb\x72\xc0\xb8\x97\x7e\xb9\x71\xf0\xa3\x3f\xec\xf6\x46\x37\x67\x0e\xac\xff\x9a\xbf\x4d\xa5\xfe\x2f\x83\x2f\x10\xc7\xa8\xed\x6c\x82\x04\x63\x88\xb5\x60\x89\xe4\xb9\x80\xa6\x09\xcb\xdf\x3b\xa3\xd3\xd6\xde\xaf\x95\x44\x27\x2e\xb8\x14\x86\x21\xb8\xcc\xc3\x9b\x72\x22\xe9\x55\x6b\x4b\xd9\x87\xd3\xe0\x33\x1f\xdb\x46\x17\x58\x74\xca\xf1\x93\x3f\xa4\xe8\x33\xe5\xd1\xc6\x1a\xb4\xea\x57\x69\x34\xf5\x18\x62\x46\x91\xeb\xd4\x8a\xdd\x63\x83\xe5\x1a\x84\xbe\x55\xff\xce\x0c\xc7\x99\xb7\x59\xcb\x42\x7e\x2a\x88\x01\x2e\x56\x48\x44\xcd\xbe\x31\x5c\x9b\xeb\xf3\x8c\x5e\x28\xfd\xc3\x3c\xc4\x28\x33\xe6\x5f\xfc\x1c\x6c\x53\x3f\x01\x00\x00\xff\xff\xe3\x0c\x4c\xbe\x9d\x01\x00\x00")

func tmpl_about_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_about_html,
		"tmpl/about.html",
	)
}

func tmpl_about_html() (*asset, error) {
	bytes, err := tmpl_about_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/about.html", size: 413, mode: os.FileMode(420), modTime: time.Unix(1419135536, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_base_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\xb0\xec\xb5\x32\xb1\xd8\x4b\x51\x48\x02\x16\xdb\x3d\xf4\xd4\xa2\xd9\x60\x93\xe3\x48\x1a\x4b\xf4\x52\x24\x43\x52\xf6\x1a\x8e\xff\x7b\x86\x92\x25\x4b\x8e\x37\x40\x0e\x39\x18\x24\x87\x6f\x3e\xf4\xde\x70\x7c\x3c\xb2\x0a\x37\x52\x23\xe3\x0d\x42\x85\x8e\xb3\xd3\x69\x95\xfe\xf6\xf7\xbf\x8f\xcf\x9f\xff\x7b\x62\x4d\x68\x55\xbe\x4a\xc7\x85\x20\xf9\x8a\xb1\xb4\xc5\x00\xac\x6c\xc0\x79\x0c\x19\xef\xc2\x26\xf9\x93\x5f\x2e\x9a\x10\x6c\x82\x5f\x3a\xb9\xcb\xf8\xa7\xe4\xe3\x43\xf2\x68\x5a\x0b\x41\x16\x0a\x39\x2b\x8d\x0e\xa8\xc9\xeb\x9f\xa7\x0c\xab\x1a\x07\xbf\x20\x83\xc2\xfc\x78\x5c\x9f\x4e\xec\x2b\x7b\x91\xaf\xf2\xe5\xe1\x39\x15\x83\x79\x0a\xac\xa1\xc5\x8c\xef\x24\xee\xad\x71\x61\x16\x6b\x2f\xab\xd0\x64\x15\xee\x64\x89\x49\x7f\xf8\x83\x49\x2d\x83\x04\x95\xf8\x12\x14\x66\x77\x43\x1e\x25\xf5\x2b\x73\xa8\x32\xee\xc3\x41\xa1\x6f\x10\x29\x4e\xe3\x70\x93\xf1\x58\xb6\xff\x4b\x88\x16\xde\xca\x4a\xaf\x0b\x63\x82\x0f\x0e\x6c\x3c\x94\xa6\x15\x93\x41\xdc\xaf\xef\xd7\x77\xa2\xf4\xfe\x62\x5b\xb7\x92\x50\xde\xff\x28\x4d\x38\x58\x2a\x3f\xe0\x5b\x88\xbe\x63\xda\x3e\x4e\x0b\x93\x7b\x2a\x06\x9a\xd3\xc2\x54\x87\x3e\x9a\x86\x1d\x2b\x15\x78\x9f\x71\xda\x16\xe0\xd8\xb0\x24\x24\x1d\x74\x2a\xf4\x39\x09\x57\xc9\x09\x17\x99\xa1\x90\xa4\xe7\x70\xb7\xbc\x3d\xbb\x9f\x15\x1f\x11\x84\x29\xba\x10\x8c\x3e\x17\x3a\x1c\xf8\x95\x53\x30\x75\xad\x90\xa8\x57\x0a\xac\xc7\x8a\xb3\x0a\x02\x9c\xcd\x31\xf1\x60\x1f\xcd\xe0\xea\xd8\x22\xbf\xef\x49\xd2\x3d\x84\x84\xa2\xcc\x12\x52\x4a\x6f\x41\x8f\x29\xbc\x4b\x8c\x56\x07\x9e\x3f\x0f\x49\x08\x2c\x6b\x6a\x1c\xa3\x53\x11\x71\xef\x3a\x4a\xfa\xde\x84\xaa\xe3\xf9\xaf\x07\xa6\x62\x20\x66\x66\x81\x2b\x8e\x0a\x07\xba\x9a\xf4\xe5\xf9\xd4\xcf\x30\xa9\x21\x48\x8e\x7c\x75\x43\x9b\x91\xc0\x51\xe3\x0b\xa1\xb2\x8a\x8d\x7e\x8b\xc6\xb4\x53\xb3\x0a\x46\xcf\xd9\xd6\xc9\xba\x09\x4b\xde\x95\xcc\xa9\xee\x73\x89\x50\x98\x8e\xee\x1f\xe2\x12\xab\x4c\x05\x5d\xbf\x8b\xb6\x50\xa3\x88\x9f\x68\x5a\x9e\xff\xdf\xaf\xdf\x3b\xa5\xa2\x53\xb3\xd3\xc6\xb8\xf6\x8a\xa5\x68\xe2\xcc\x99\xd8\x36\x1e\xc1\x95\xcd\xb2\xc2\x19\x29\x11\x9a\xd4\xce\x74\x76\x01\x21\x90\xd4\xb6\x0b\xb3\x97\xc5\x17\x2e\xf1\x19\x50\x02\xce\xac\x82\x12\x1b\xa3\xa8\xdf\x33\xfe\xe1\x46\xb2\x41\x8f\x99\x61\xf1\x14\x7c\x57\xb4\xf2\x12\xbb\x08\x9a\xd1\xef\xf2\xfe\x86\x88\x37\x3a\x43\xc4\x32\xae\x44\x5f\x6c\x53\x41\x6c\xf4\x9b\x77\x5e\x2f\x4d\x68\xd4\x55\x9c\xca\xab\xd9\xb0\xde\xd0\xdc\x39\x0f\xeb\x79\x30\x5f\x3a\x69\xe7\x74\x88\x2d\xec\x60\xb0\x72\xe6\x5d\x49\xea\x6d\xbd\x00\x6b\x95\x2c\xfb\x87\xb5\xde\xfa\xbe\xc5\x7b\xc8\x3c\x46\x0f\xfe\xd9\x91\xb8\xbd\x9e\x88\xcb\xe8\x44\x50\x3f\xd3\x68\xc4\xf5\x7f\x28\xd3\xb7\x7d\x0b\x00\x00\xff\xff\xce\xc7\x76\x5e\x87\x06\x00\x00")

func tmpl_base_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_base_html,
		"tmpl/base.html",
	)
}

func tmpl_base_html() (*asset, error) {
	bytes, err := tmpl_base_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/base.html", size: 1671, mode: os.FileMode(420), modTime: time.Unix(1419777316, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_edit_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xe7\x29\x06\x1d\xf6\x96\x78\x73\xdd\xb5\x75\xd8\xa5\x39\x15\x1a\x48\xfa\x00\xe3\x68\x62\x0b\x64\x49\xc8\xa3\xb4\xc1\xf8\xdd\x3b\x72\x1a\x68\xa0\xf4\x60\xb0\x66\xbe\x9f\x99\x6f\xa6\x09\x0c\x9d\xad\x27\x50\x64\x2c\x2b\x98\xe7\x95\xd4\x98\x86\xe8\x90\xa5\xda\x13\x1a\x4a\x0a\x36\x7b\xec\xe8\x68\xd9\x51\x81\x00\xd4\xfd\x56\x3f\x09\xc3\xfa\x0e\xa6\x69\x73\xec\xed\x58\x10\x9b\x05\x32\xcf\x75\x25\xfd\x55\xc1\x9d\x43\x1a\x00\x4f\x6c\x83\x6f\x54\x35\xe2\x85\xaa\x6f\xf0\x0a\x06\xe2\x3e\x98\x46\xed\x5f\x0e\x47\xa5\x85\x29\x5c\x63\x2f\x70\x72\x38\x8e\x8d\x2a\x32\xeb\x2e\x85\x1c\x95\xae\x99\xde\x19\x13\x21\x78\x1c\xa8\x51\x6d\x30\x57\xf5\x00\x3c\x05\xcf\x29\x38\x05\x29\xbc\x49\x6d\xfb\x5b\xe9\xaf\xa6\xff\x84\x50\x66\xbc\xeb\xe8\xba\x12\xab\x4f\x53\xeb\x63\xe6\xbb\x5a\xcb\x1e\xe4\x5b\x4b\x48\x98\x1d\x43\xcc\xce\xad\x93\xed\x7a\x89\x8a\xaf\x51\xcc\xc7\xdc\x0e\x25\xb8\x0b\xba\x2c\xcf\x83\x2c\xb8\x8c\x5f\x57\x65\x92\x5b\x06\x6d\xd2\x75\xd4\x3b\x9b\x46\x11\x16\x3f\x26\xf3\xe7\x21\xb5\x9d\x40\x91\xa5\xfc\x7f\xe9\xce\x33\xfc\x1a\x0c\x8e\xfd\x5f\x78\x46\xe1\xe4\x68\x7e\xe0\xbc\x2e\xdd\xb2\x4f\xd4\x8f\xc7\x3b\x87\xc0\xe5\x78\xb7\xa3\x92\x37\xf2\xf7\x11\x00\x00\xff\xff\xf0\x51\x23\xb1\xf2\x01\x00\x00")

func tmpl_edit_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_edit_html,
		"tmpl/edit.html",
	)
}

func tmpl_edit_html() (*asset, error) {
	bytes, err := tmpl_edit_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/edit.html", size: 498, mode: os.FileMode(420), modTime: time.Unix(1419777536, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_home_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x52\xc1\x8a\xdb\x40\x0c\xbd\xf7\x2b\xb4\xbe\xf4\x12\x62\xba\xc7\xe2\x1a\x7a\x28\x2c\xb4\xf4\x50\x52\x72\xd6\xda\xb2\x47\xc4\x99\x31\x63\x25\x83\x31\xf9\xf7\x4a\x9e\x64\xb3\xcd\x5e\x3c\xf2\x93\xe6\x3d\xe9\x8d\x96\x05\x5a\xea\xd8\x13\x14\x2e\x1c\xa9\x80\xcb\xe5\x93\x62\x42\xc7\x71\x40\x31\x94\xb0\xa5\x58\x40\xf1\x72\x4b\x03\x54\xee\x4b\xbd\xa7\xa1\x51\x04\x24\xc0\x9e\x0f\xbc\xff\xbe\x7b\xaa\x4a\xc5\x2d\xdd\xf2\xd9\x4e\x8d\xc6\x7a\xe7\x08\x92\x16\x40\x72\x14\x09\x7c\x10\xc7\xbe\x07\x9e\xa0\x0b\x91\xce\x14\x37\x60\xdf\xf9\x0d\xf6\x19\x44\xdf\xe6\xd0\x30\x1c\x12\xce\xd3\xb6\x2a\xc7\x37\xde\x17\x65\xfb\x3c\x81\x0b\x09\x58\x20\x85\x78\x98\xbe\xde\xf3\x61\xc8\x81\x86\x03\x6b\x0f\xec\x0f\x10\x3a\x98\xb4\xe3\x2c\x34\x87\x13\x24\xf4\x62\xfd\xa7\xc8\x3a\x29\xbe\x86\x93\xa8\x84\xd6\xbf\xbb\xfa\x1b\xcf\xdc\x9b\x11\x5a\x57\x21\xb8\x48\xdd\xb7\xa2\x1c\xb1\xa7\x72\xe7\x50\x8c\xb9\x2f\xea\x07\xa0\x2a\xb1\xfe\xc0\xf4\x83\x45\x1d\x80\x89\xd4\x0f\x2d\x84\x60\xbf\x3a\x00\x9e\x69\xed\x40\xc8\xaf\x43\x53\xab\xf3\xb0\x6c\x20\x44\x68\x22\x99\x36\xaa\x13\x29\xbb\x68\x42\x10\xb9\x77\xda\xb9\x19\xfa\x74\x97\xa9\xca\xdb\xd4\x6a\xcf\x4f\xa2\x11\xd8\xc3\x91\x95\x52\x4c\x0f\xfd\x1c\x3c\x99\xb1\xf3\xfa\x14\x1b\x68\xd0\x67\x35\x35\x23\x66\xe6\xa4\x4d\xea\x1b\x01\x36\x4d\x38\x79\xc1\x57\x1e\x58\xe6\x77\xc6\xbb\xe7\xfa\x0f\x35\xa4\xc6\xfd\x1d\x5b\xed\x6d\xd2\x47\x7f\xbe\xe6\x4e\x57\xf9\x65\x89\xe8\x95\x6c\xfb\x8b\x27\x59\x17\xe6\xe6\xc1\x83\x83\xcb\xb2\xbd\x5c\x8a\x7a\x3d\xcc\xb3\xfb\x2c\xcb\x42\xbe\xbd\x5e\xad\xca\x4c\x5c\x95\xeb\x5e\xfd\xb7\x9d\x5d\x08\x62\xdb\x99\xb7\x56\xef\x68\xf4\x2f\x00\x00\xff\xff\x82\xb9\x96\xc4\xd3\x02\x00\x00")

func tmpl_home_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_home_html,
		"tmpl/home.html",
	)
}

func tmpl_home_html() (*asset, error) {
	bytes, err := tmpl_home_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/home.html", size: 723, mode: os.FileMode(420), modTime: time.Unix(1419177865, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_view_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xcd\x6e\xdb\x30\x0c\xbe\xf7\x29\x08\x1e\x76\x4b\xbc\x5e\x37\xc7\x87\x6d\xe8\x69\xc0\x0a\x34\x3b\x0d\x3b\x30\x16\x13\x09\x93\x25\x41\xa2\xd3\x05\x81\xdf\x7d\x54\x1a\x77\x35\x10\xf4\x60\xc0\xe2\xc7\xef\x47\x14\xcf\x67\x30\xbc\x77\x81\x01\x8f\x8e\x9f\x11\xa6\xe9\x4e\x6b\xc2\x43\xf2\x24\x5a\xb5\x4c\x86\x33\xc2\xfa\x91\x0e\xbc\x75\xe2\xb9\xb6\x00\xb4\xf6\xbe\x3b\x9f\xd7\x5b\xeb\x4a\x45\xd6\x17\x68\x9a\xda\x46\xeb\x77\x15\x4f\xe0\xcc\x06\xd9\x38\x59\x79\x17\xfe\x60\xf7\xab\x25\xb0\x99\xf7\x1b\x6c\x6a\xb5\xb9\xc1\xc6\xae\x22\x6d\x43\xdd\xef\xb6\x49\x2f\x3a\xc6\x1d\xff\x2b\xed\x63\x1e\x10\x7a\x4f\xa5\x6c\xd0\x3a\xc3\xd8\x69\x4f\x75\x7b\x2b\x9f\x54\xf2\xb6\x7c\x4f\xa1\x67\xbf\x30\x50\x72\x55\x05\xea\xc5\xc5\xa0\xec\x42\xc7\xdb\x6c\x18\x58\x6c\xd4\x28\x8f\x3f\x9e\xb6\x57\xe3\x6b\xc0\x6b\xa2\x2a\xb4\x3a\xe4\x38\x26\xec\x5a\xe1\xbf\x42\x99\x09\x02\x0d\xbc\xc1\x5d\x34\x27\x5c\x34\xf6\x31\x48\x8e\x1e\x21\xc7\x67\xad\xdd\x7f\xc4\xc5\x44\xbf\x28\xa1\x0e\x74\xd6\xe9\xda\x46\xad\x5e\x6d\x5d\x48\xa3\xcc\x7a\x3b\x09\xa0\xdf\x4a\xdf\x92\x46\x2f\x90\x46\xef\x57\xd9\x1d\xac\x20\xc8\x29\xa9\x7d\x19\x77\x83\xd3\xd3\x91\xfc\xa8\xc7\x27\xbd\xe4\x3c\xbb\xa6\xa6\xa9\xff\xed\x2e\xcf\x26\xd7\xc9\xd7\x40\xdf\x5c\xd1\x5d\x38\xcd\x71\x5e\xe1\xda\x9c\xba\x07\x97\x8b\xc6\xd0\x7c\xc2\xe6\x13\xbc\xbd\xc0\x83\xca\x92\x68\xf9\xeb\x05\x9d\x26\xf8\x30\x18\x2a\xf6\x33\x7c\x27\xe5\x8c\xc9\xbc\xc3\xf9\x79\x41\xab\xa1\x3e\xd3\x62\x23\xf7\x31\x4a\xdd\xc8\x97\x4d\xe5\x60\xf4\xef\x5f\x00\x00\x00\xff\xff\xb6\xc7\x15\x0c\xc7\x02\x00\x00")

func tmpl_view_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_view_html,
		"tmpl/view.html",
	)
}

func tmpl_view_html() (*asset, error) {
	bytes, err := tmpl_view_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/view.html", size: 711, mode: os.FileMode(420), modTime: time.Unix(1419777540, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _js_application_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\xd1\x4a\xc3\x30\x14\x86\xef\xfb\x14\x07\xbc\x48\x0a\xda\x17\x10\x6f\xc4\x09\xc2\x90\x81\x4f\x10\x4e\x4e\x35\x2c\x4d\x66\x9a\x0c\x86\xf4\xdd\xcd\xa9\x64\xc6\x6e\xa2\x37\xeb\x4d\x43\xf2\xff\xdf\xf9\xff\x23\xfb\xe4\x30\x1a\xef\x64\x0b\x1f\x0d\xe4\x6f\xaf\x02\x90\x36\x71\x6d\xdc\x16\xee\x40\x7b\x4c\x03\xb9\xd8\xbd\x27\x0a\x87\x17\xb2\x84\xd1\x07\x29\xae\x58\x73\x63\x59\xa4\x44\x7b\xdb\xcc\x5e\xd3\x83\x2c\xde\xc2\x5b\x32\x37\x35\xf4\x95\xe2\xca\x12\x1f\xef\x0f\x4f\x5a\x8a\x23\x94\x91\x4b\xf7\xa3\x0f\xc3\x9f\xe6\x3e\x8b\x96\x66\x54\x0e\xc9\xfe\xab\x10\xdb\x61\xf7\x55\xa9\x20\x4a\xf2\x4e\x69\xbd\xda\x67\xeb\xda\x8c\x91\x1c\x65\x13\x5a\x83\x5b\x71\x0d\xc7\x2d\x12\xbf\xd7\xd5\x67\x00\x5f\x76\xbb\x30\xff\x1f\xa8\x57\xc9\x46\x59\x0d\xa8\x87\x6c\x3a\xb4\x6a\x1c\x9f\xd5\x40\x39\xac\x78\x33\x9a\xc4\xa9\x92\x57\xf1\x53\x58\x89\xa6\x0a\xfd\x5d\xfd\xe2\xe9\x4f\x33\xfd\x12\xfe\x4c\xcd\x33\xe9\xa7\x66\x6a\xf3\x98\xcf\x00\x00\x00\xff\xff\xed\xc3\x11\x17\xa1\x02\x00\x00")

func js_application_js_bytes() ([]byte, error) {
	return bindata_read(
		_js_application_js,
		"js/application.js",
	)
}

func js_application_js() (*asset, error) {
	bytes, err := js_application_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/application.js", size: 673, mode: os.FileMode(420), modTime: time.Unix(1419176615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/about.html": tmpl_about_html,
	"tmpl/base.html": tmpl_base_html,
	"tmpl/edit.html": tmpl_edit_html,
	"tmpl/home.html": tmpl_home_html,
	"tmpl/view.html": tmpl_view_html,
	"js/application.js": js_application_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"js": &_bintree_t{nil, map[string]*_bintree_t{
		"application.js": &_bintree_t{js_application_js, map[string]*_bintree_t{
		}},
	}},
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"about.html": &_bintree_t{tmpl_about_html, map[string]*_bintree_t{
		}},
		"base.html": &_bintree_t{tmpl_base_html, map[string]*_bintree_t{
		}},
		"edit.html": &_bintree_t{tmpl_edit_html, map[string]*_bintree_t{
		}},
		"home.html": &_bintree_t{tmpl_home_html, map[string]*_bintree_t{
		}},
		"view.html": &_bintree_t{tmpl_view_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

