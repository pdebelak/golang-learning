package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _tmpl_about_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x31\x8f\xdb\x3c\x0c\xdd\xbf\x5f\xf1\x3e\x2f\x5d\x02\x1b\x5d\x0f\xae\x81\x43\x5b\xa0\x40\x97\x02\x0d\x70\x33\x6d\xd3\xb1\x6a\x47\x12\x24\x26\x3a\xf7\x90\xff\x5e\xca\x39\xa7\x97\x1b\x3b\x89\x12\xf9\x48\xbe\x47\xf1\xe5\x05\x3d\x0f\xc6\x32\x0a\x6a\xdd\x49\x0a\x5c\x2e\xff\xe9\xa3\xf0\xd1\xcf\x24\xfa\x3c\x32\xf5\x1c\x0a\x14\x8f\x37\x3f\x50\x8f\x1f\x9b\xf5\x8e\x27\x33\x99\xa7\xc7\x7d\x5d\xe9\x4b\x76\xf4\xe6\x9c\x4f\xb5\x7c\xf3\xea\x83\x89\x90\x91\x91\xf4\xaa\x06\x09\x26\xeb\x52\xc4\xea\x92\x0f\x11\x34\xcf\x58\xab\x97\x75\xe5\x6f\xe8\x6f\x1c\x58\x9d\xa3\x4b\x1a\x85\xe4\xc2\x14\x1f\xfe\xfa\xdd\x7c\x35\xd4\x9c\x4d\xb3\x1f\x8d\x9d\xe0\x06\x44\x77\x64\xd1\xcb\x01\x8b\x3b\x21\x91\x15\x88\x43\x0a\x46\xa9\x6c\x25\x34\xfe\x2d\x74\xf1\xbc\xb6\x17\x4f\xed\x2f\xee\x04\xc6\x2a\x22\x3f\xb4\xee\x39\x63\xce\x5c\xe2\x33\x79\x23\x34\x9b\xdf\x24\xc6\x59\x74\xee\x64\x25\xfe\xff\x3e\xd5\x57\xa3\xb0\x80\xc8\xca\x35\xd3\x74\xf9\xaa\x0c\xe8\xcc\x6b\x0b\xc2\x16\x64\x7b\x70\xaf\x84\x8c\xec\xe0\x02\xba\xc0\x59\x66\x82\xe5\x74\x55\xc8\xd3\x81\x11\xcc\x61\x94\xdc\x45\xe0\x37\x65\xea\x6a\xa3\xad\xfa\x7c\x67\xf6\xda\x2c\x8e\x46\x53\xae\xb2\x92\x5d\x9c\xe5\x5d\x3e\x53\x46\xee\xd0\x91\xbd\x56\x53\x35\xc2\x35\x73\xd2\x26\x61\x1d\xa8\x5b\x59\x50\x6b\x66\x23\xcb\x9d\xf2\xfb\x6d\x58\x19\x10\x71\x8a\x8c\x9a\x30\x06\x1e\x3e\x15\xa3\x88\x7f\xa8\xaa\x9e\x82\x8a\x3c\x98\xc0\xad\x4e\xaf\xb4\x2c\x95\x0f\x2e\xeb\x17\xab\x23\x85\xa9\x77\xc9\x56\x45\xb3\x99\x75\x45\x0d\x06\xa5\x1b\x65\x99\x15\x58\xfe\x5b\xc2\xb8\x68\xc3\xcf\x45\xf3\x53\x15\xce\x04\x6f\x69\x7b\x16\x32\x73\x84\xce\x26\xff\x97\xdb\xc8\x37\xe4\x1d\xbd\xed\x5b\x26\x8a\x1a\xd0\xeb\xa0\x17\xfc\x60\xd1\xc9\x7d\xe1\x96\x67\x9a\x4a\xac\x05\xf4\xdb\xc6\x9c\xe4\x7d\xab\x29\xa5\xd2\xe7\xf8\xfe\x35\xbc\x73\x47\xe5\xba\x35\xb4\xd5\xaa\xab\x75\x17\xee\x96\x69\x70\x4e\xf2\x32\x5d\x97\x8c\x75\x70\x97\xcb\x9f\x00\x00\x00\xff\xff\xeb\x7a\x62\x99\x83\x03\x00\x00")

func tmpl_about_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_about_html,
		"tmpl/about.html",
	)
}

func tmpl_about_html() (*asset, error) {
	bytes, err := tmpl_about_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/about.html", size: 899, mode: os.FileMode(420), modTime: time.Unix(1419780507, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_base_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x18\xde\xed\x95\x89\x20\x9b\xa2\x90\x04\x04\x69\x1a\x74\xd5\xa2\x70\x91\x76\x39\x92\xc6\x12\x13\x8a\x54\x49\xca\x8e\xe1\xfa\xdf\x3b\xd4\xcb\x92\x9b\xa0\xab\x2e\x0c\x92\xc3\x33\x0f\x9f\x33\x1c\x1d\x8f\xac\xc0\xad\xd4\xc8\x78\x85\x50\xa0\xe5\xec\x74\x5a\xc5\x57\x1f\x3e\xdf\x6d\x7e\x7c\xb9\x67\x95\xaf\x55\xba\x8a\xc7\x85\x20\xe9\x8a\xb1\xb8\x46\x0f\x2c\xaf\xc0\x3a\xf4\x09\x6f\xfd\x36\x7a\xc7\xcf\x17\x95\xf7\x4d\x84\x3f\x5b\xb9\x4b\xf8\xf7\xe8\xdb\x6d\x74\x67\xea\x06\xbc\xcc\x14\x72\x96\x1b\xed\x51\x93\xd7\xa7\xfb\x04\x8b\x12\x7b\x3f\x2f\xbd\xc2\xf4\x78\x5c\x9f\x4e\xec\x17\x7b\x94\xcf\xf2\xf1\x76\x13\x8b\xde\x3c\x05\xd6\x50\x63\xc2\x77\x12\xf7\x8d\xb1\x7e\x16\x6b\x2f\x0b\x5f\x25\x05\xee\x64\x8e\x51\x77\xf8\x9f\x49\x2d\xbd\x04\x15\xb9\x1c\x14\x26\xd7\x7d\x1e\x25\xf5\x33\xb3\xa8\x12\xee\xfc\x41\xa1\xab\x10\x29\x4e\x65\x71\x9b\xf0\x50\xb6\x7b\x2f\x44\x0d\x2f\x79\xa1\xd7\x99\x31\xde\x79\x0b\x4d\x38\xe4\xa6\x16\x93\x41\xdc\xac\x6f\xd6\xd7\x22\x77\xee\x6c\x5b\xd7\x92\x50\xce\xfd\x3d\x4d\xe7\x07\x4d\xa3\x64\x4e\x9c\x98\xd1\x2b\x16\x3d\xbb\x71\x66\x8a\x43\x17\x44\xc3\x8e\xe5\x0a\x9c\x4b\x38\x6d\x33\xb0\xac\x5f\x22\x52\x0c\x5a\xe5\xbb\x54\x84\x2b\xe4\x84\x0b\x84\x00\xa9\x69\x87\xbb\xe5\xed\xe0\x3e\x08\x3d\x22\x08\x93\xb5\xde\x1b\xcd\xfc\xa1\x21\x7a\xfb\x03\xbf\x70\xf2\xa6\x2c\x15\x12\xe3\x4a\x41\xe3\xb0\xe0\xac\x00\x0f\x83\x39\x24\xee\xed\xa3\x19\x6c\x19\x3a\xe3\xbf\x3d\x29\xb9\x07\x1f\x51\x94\x59\x42\x4a\xe9\x1a\xd0\x63\x0a\x67\x23\xa3\xd5\x81\xa7\x9b\x3e\x09\x81\x65\xd9\x71\x13\x8b\x80\x7b\xd3\x51\xd2\xff\x8d\xa8\x3a\x9e\xfe\x7b\x60\x2c\x7a\x62\x66\x16\xb8\xe0\x28\xb3\xa0\x8b\x49\x66\x9e\x4e\x6d\x0c\x93\x1a\x82\xe4\x48\x57\xaf\x68\x33\x12\x38\x6a\x7c\x26\x54\x16\xa1\xbf\x5f\xa3\x31\xde\x1a\x5b\x33\xc8\x03\x53\x94\xb0\x81\x12\x85\x43\xb0\x79\xc5\x19\xbd\x97\xca\x90\xe7\xc3\xfd\xe6\x52\xca\xe0\xc5\x99\x35\x41\xb7\x01\xbe\xe0\x63\x56\x55\x80\x46\xa5\x35\x6d\xb3\x80\x10\x48\xea\xa6\xf5\x43\xc7\x78\x7c\xa1\xee\xee\x1f\xe7\x98\x7f\x1e\x20\x74\x25\xa5\xe3\xac\x51\x90\x63\x65\x14\xb5\x5f\xc2\x3f\x4a\x5d\x30\x63\x59\x6e\x11\x3c\x32\x60\xa1\xfe\x65\x25\x3d\x5b\x33\xc3\xa2\x51\x5d\x9b\xd5\xd2\x4f\xa9\x32\xaf\x19\xfd\xce\xaf\xe3\xc1\x5c\xbd\x22\x9a\x08\x25\xcd\xce\xad\x9a\xd1\x33\xb2\x3f\xdb\x5a\x59\x56\x7e\x59\x96\x92\x29\x69\x3f\xc8\x0c\x99\x69\xe9\xfe\x36\x2c\x41\xe9\x58\xd0\xf5\x9b\xe8\x4e\xa3\xd0\x26\xa6\xe6\xe9\xd7\x6e\xfd\xd3\x29\x16\xad\xba\xe8\x98\xc5\x36\x16\x54\x5b\xb7\x79\xe3\xe9\xd3\x54\x47\x22\x97\x26\xf9\x6a\x36\xe0\xb7\x34\xab\x86\x01\x3f\x0f\xe6\x72\x2b\x9b\xb9\x94\xe2\x09\x76\xd0\x5b\x39\x73\x36\xa7\xb2\x9f\x96\x13\xeb\xc9\x75\xef\xa3\x83\x84\xc9\xd5\x8f\x2c\x9a\x60\xdd\x67\x62\xca\xfe\x3b\x00\x00\xff\xff\xb8\x4b\x44\xc8\x5d\x06\x00\x00")

func tmpl_base_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_base_html,
		"tmpl/base.html",
	)
}

func tmpl_base_html() (*asset, error) {
	bytes, err := tmpl_base_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/base.html", size: 1629, mode: os.FileMode(420), modTime: time.Unix(1419797160, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_edit_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xe7\x29\x06\x1d\xf6\x96\x78\x73\xdd\xb5\x75\xd8\xa5\x39\x15\x1a\x48\xfa\x00\xe3\x68\x62\x0b\x64\x49\xc8\xa3\xb4\xc1\xf8\xdd\x3b\x72\x1a\x68\xa0\xf4\x60\xb0\x66\xbe\x9f\x99\x6f\xa6\x09\x0c\x9d\xad\x27\x50\x64\x2c\x2b\x98\xe7\x95\xd4\x98\x86\xe8\x90\xa5\xda\x13\x1a\x4a\x0a\x36\x7b\xec\xe8\x68\xd9\x51\x81\x00\xd4\xfd\x56\x3f\x09\xc3\xfa\x0e\xa6\x69\x73\xec\xed\x58\x10\x9b\x05\x32\xcf\x75\x25\xfd\x55\xc1\x9d\x43\x1a\x00\x4f\x6c\x83\x6f\x54\x35\xe2\x85\xaa\x6f\xf0\x0a\x06\xe2\x3e\x98\x46\xed\x5f\x0e\x47\xa5\x85\x29\x5c\x63\x2f\x70\x72\x38\x8e\x8d\x2a\x32\xeb\x2e\x85\x1c\x95\xae\x99\xde\x19\x13\x21\x78\x1c\xa8\x51\x6d\x30\x57\xf5\x00\x3c\x05\xcf\x29\x38\x05\x29\xbc\x49\x6d\xfb\x5b\xe9\xaf\xa6\xff\x84\x50\x66\xbc\xeb\xe8\xba\x12\xab\x4f\x53\xeb\x63\xe6\xbb\x5a\xcb\x1e\xe4\x5b\x4b\x48\x98\x1d\x43\xcc\xce\xad\x93\xed\x7a\x89\x8a\xaf\x51\xcc\xc7\xdc\x0e\x25\xb8\x0b\xba\x2c\xcf\x83\x2c\xb8\x8c\x5f\x57\x65\x92\x5b\x06\x6d\xd2\x75\xd4\x3b\x9b\x46\x11\x16\x3f\x26\xf3\xe7\x21\xb5\x9d\x40\x91\xa5\xfc\x7f\xe9\xce\x33\xfc\x1a\x0c\x8e\xfd\x5f\x78\x46\xe1\xe4\x68\x7e\xe0\xbc\x2e\xdd\xb2\x4f\xd4\x8f\xc7\x3b\x87\xc0\xe5\x78\xb7\xa3\x92\x37\xf2\xf7\x11\x00\x00\xff\xff\xf0\x51\x23\xb1\xf2\x01\x00\x00")

func tmpl_edit_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_edit_html,
		"tmpl/edit.html",
	)
}

func tmpl_edit_html() (*asset, error) {
	bytes, err := tmpl_edit_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/edit.html", size: 498, mode: os.FileMode(420), modTime: time.Unix(1419777536, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_home_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x52\xc1\x8e\xd3\x40\x0c\xbd\xf3\x15\xde\x5c\xb8\x54\x8d\xd8\x23\x0a\x91\x10\x42\x5a\x09\x4e\x68\x51\xcf\x6e\xe2\x74\x4c\xd3\x71\x34\xe3\x34\x84\xa8\xff\x8e\x27\xd3\x6e\x0b\x97\xc6\x7d\x1e\xdb\xef\x3d\x7b\x59\xa0\xa5\x8e\x3d\x41\xe1\xe4\x44\x05\x5c\x2e\xef\x0c\x53\x3a\x0d\x3d\x6a\x42\x09\x5b\x0a\x05\x14\x2f\xb7\x34\x40\xe5\x3e\xd4\x3b\xea\x1b\x43\x40\x05\x76\x7c\xe4\xdd\xe7\xd7\xa7\xaa\x34\x3c\xa5\x5b\x3e\xa7\xaf\x45\x43\xfd\xea\x08\x26\x7b\x00\x93\xa3\x40\xe0\x45\x1d\xfb\x03\x70\x84\x4e\x02\x9d\x29\x6c\x20\xfd\xce\x6f\xb0\xcf\x20\xfa\x36\x87\x09\xc3\x7e\xc2\x39\x6e\xab\x72\x78\xeb\xfb\x62\xdd\xde\x47\x70\x32\x01\x2b\x4c\x12\x8e\xf1\xe3\x3d\x2f\x7d\x0e\x2c\xec\xd9\x38\xb0\x3f\x82\x74\x10\x8d\x71\x1e\x34\xcb\x08\x13\x7a\x4d\xfc\xa7\xc0\xa6\x14\xf7\x32\xaa\x8d\xb0\xf7\x8f\xa5\xf3\x60\x1a\x4d\x43\x1c\xf7\xbf\xa8\x51\x60\x6f\x15\x09\xd8\xcb\xef\x54\x73\xa6\x2d\x7c\xc1\x81\x15\x7b\xfe\x83\xca\xe2\xa1\x91\xd1\x6b\x7c\xfa\xbf\xd5\x57\xb6\xb2\x00\x91\xcc\x10\x87\x0a\x92\xfe\x9a\x02\x3c\xd3\x4a\x41\xc9\xaf\xaa\xa9\x35\x41\xac\x1b\x90\x00\x4d\xa0\xb4\x05\x34\x2b\xa6\x6c\xe3\x80\x07\x82\xc0\x07\xa7\x89\x45\xa0\x87\x31\x55\x79\x93\x6d\xfe\x7c\x23\x1a\x8c\x2c\x9c\xd8\x5a\x6a\x9a\x87\x7e\x16\x4f\xc9\xd9\x79\xdd\xc5\x06\x1a\xf4\x79\x9a\xb9\x11\x72\xe7\xc9\x48\xda\x92\x00\x9b\x55\x05\xee\xb9\x67\x9d\x1f\x9c\x77\xcf\xf5\x0f\x6a\xc8\x9c\xfb\x39\xb4\xc6\x2d\xda\xd6\x9f\xaf\xb9\xf1\x3a\x7e\x59\x02\x7a\x6b\xb6\xfd\xce\x51\xd7\x8b\xb9\x79\x50\x21\xb8\x40\xdd\xa7\xa2\x4c\xd3\xca\x65\xd9\x5e\x2e\x45\xbd\x7e\xaa\x12\xeb\xbb\x96\x65\x21\xdf\x5e\x4b\xab\x32\x37\xae\xca\xf5\xb0\xfe\x39\xcf\x4e\x44\xd3\x79\xe6\xb3\xb5\x1a\x8b\xfe\x06\x00\x00\xff\xff\xdc\x5f\x29\x3c\xd4\x02\x00\x00")

func tmpl_home_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_home_html,
		"tmpl/home.html",
	)
}

func tmpl_home_html() (*asset, error) {
	bytes, err := tmpl_home_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/home.html", size: 724, mode: os.FileMode(420), modTime: time.Unix(1419780434, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _tmpl_view_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xcd\x6e\xdb\x30\x0c\xbe\xf7\x29\x08\x1e\x76\x4b\xbc\x5e\x37\xc7\x87\x6d\xe8\x69\xc0\x0a\x34\x3b\x0d\x3b\x30\x16\x13\x09\x93\x25\x41\xa2\xd3\x05\x81\xdf\x7d\x54\x1a\x77\x35\x10\xf4\x60\xc0\xe2\xc7\xef\x47\x14\xcf\x67\x30\xbc\x77\x81\x01\x8f\x8e\x9f\x11\xa6\xe9\x4e\x6b\xc2\x43\xf2\x24\x5a\xb5\x4c\x86\x33\xc2\xfa\x91\x0e\xbc\x75\xe2\xb9\xb6\x00\xb4\xf6\xbe\x3b\x9f\xd7\x5b\xeb\x4a\x45\xd6\x17\x68\x9a\xda\x46\xeb\x77\x15\x4f\xe0\xcc\x06\xd9\x38\x59\x79\x17\xfe\x60\xf7\xab\x25\xb0\x99\xf7\x1b\x6c\x6a\xb5\xb9\xc1\xc6\xae\x22\x6d\x43\xdd\xef\xb6\x49\x2f\x3a\xc6\x1d\xff\x2b\xed\x63\x1e\x10\x7a\x4f\xa5\x6c\xd0\x3a\xc3\xd8\x69\x4f\x75\x7b\x2b\x9f\x54\xf2\xb6\x7c\x4f\xa1\x67\xbf\x30\x50\x72\x55\x05\xea\xc5\xc5\xa0\xec\x42\xc7\xdb\x6c\x18\x58\x6c\xd4\x28\x8f\x3f\x9e\xb6\x57\xe3\x6b\xc0\x6b\xa2\x2a\xb4\x3a\xe4\x38\x26\xec\x5a\xe1\xbf\x42\x99\x09\x02\x0d\xbc\xc1\x5d\x34\x27\x5c\x34\xf6\x31\x48\x8e\x1e\x21\xc7\x67\xad\xdd\x7f\xc4\xc5\x44\xbf\x28\xa1\x0e\x74\xd6\xe9\xda\x46\xad\x5e\x6d\x5d\x48\xa3\xcc\x7a\x3b\x09\xa0\xdf\x4a\xdf\x92\x46\x2f\x90\x46\xef\x57\xd9\x1d\xac\x20\xc8\x29\xa9\x7d\x19\x77\x83\xd3\xd3\x91\xfc\xa8\xc7\x27\xbd\xe4\x3c\xbb\xa6\xa6\xa9\xff\xed\x2e\xcf\x26\xd7\xc9\xd7\x40\xdf\x5c\xd1\x5d\x38\xcd\x71\x5e\xe1\xda\x9c\xba\x07\x97\x8b\xc6\xd0\x7c\xc2\xe6\x13\xbc\xbd\xc0\x83\xca\x92\x68\xf9\xeb\x05\x9d\x26\xf8\x30\x18\x2a\xf6\x33\x7c\x27\xe5\x8c\xc9\xbc\xc3\xf9\x79\x41\xab\xa1\x3e\xd3\x62\x23\xf7\x31\x4a\xdd\xc8\x97\x4d\xe5\x60\xf4\xef\x5f\x00\x00\x00\xff\xff\xb6\xc7\x15\x0c\xc7\x02\x00\x00")

func tmpl_view_html_bytes() ([]byte, error) {
	return bindata_read(
		_tmpl_view_html,
		"tmpl/view.html",
	)
}

func tmpl_view_html() (*asset, error) {
	bytes, err := tmpl_view_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "tmpl/view.html", size: 711, mode: os.FileMode(420), modTime: time.Unix(1419777540, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _js_application_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\xc0\x7a\x67\x96\xb4\x23\x52\xbe\xac\x67\x1a\xa7\x6e\x27\xeb\x78\x9b\xcc\xd8\x4d\x5a\xab\xb3\x0f\x99\x3c\xc0\xe4\x91\x88\x35\x05\xb0\x00\x28\x59\xdb\xe8\xbf\xf7\x00\xbc\x01\x24\xe5\x4b\x66\xa3\x07\x5d\xc0\x73\xc3\xb9\x7c\xf8\xa0\x70\x5e\xf2\x44\x33\xc1\xc3\x03\xf2\xbf\x3d\x82\xaf\x15\x95\x04\x52\xa6\xaf\x19\xbf\x27\x17\x24\x15\x49\xb9\x04\xae\xe3\xff\x96\x20\x37\xb7\x90\x43\xa2\x85\x0c\x83\x1f\x8d\x4c\x94\x1b\x21\x1a\x1c\xbc\xd9\xb3\xba\x6c\x4e\xc2\x46\xb7\xb1\xd7\xb7\xf9\xc9\x35\xba\x00\x7d\x95\x83\xf9\xfa\xcb\xe6\x43\x1a\x06\xad\x51\x63\xb2\xaf\xfd\xab\x90\xcb\x27\x95\xe7\x28\xd4\x57\x4e\x28\x4f\x20\x7f\xd6\x86\x8c\x3a\x29\xaa\x2d\x35\x26\x9a\xc8\x63\x9a\xa6\x57\x2b\x54\xbd\x66\x4a\x03\x07\x54\x4a\x72\x96\xdc\x07\x13\xd2\x66\x11\xcc\x73\x77\xeb\xd6\x80\x59\x8c\x0b\x69\x3f\xdf\xc1\x9c\x96\xb9\x0e\x1d\x07\xae\x93\x4f\x71\x92\x53\xa5\xfe\x49\x97\x80\xc1\x06\x19\x4b\x21\x18\x4a\x9a\x54\xf8\x82\x8e\xd0\xd6\x31\xdd\x6d\xfd\xbb\x47\x3f\x8c\x69\x47\xf0\x23\xdb\x1c\x89\x7e\xbb\xb7\x37\x3d\xfc\x61\x8f\x1c\x92\x5f\x84\xd0\x4a\x4b\x5a\x90\x35\xd3\x99\x28\x35\xf9\xfd\x5f\xa6\x76\x64\x75\x14\x9f\xc5\x47\x04\x6b\xe6\xc8\x9c\x5a\x95\x0d\x79\x47\x39\x83\x1c\x3f\x56\x4c\x91\x92\xa7\x20\xc9\xcd\x87\x19\xb9\x66\x09\x70\x05\x46\x28\xd3\xba\x50\xe7\xd3\xe9\x02\xad\x96\x77\x71\x22\x96\x53\x4d\x17\x74\x4d\xa7\x77\x8d\xb5\xa8\xf6\x18\xfd\x6e\xbb\x05\xb5\xa6\x36\x38\xfb\x36\x3d\xac\x82\x3e\x24\xff\xd1\x2c\x67\x7a\xd3\x26\x52\xd5\x0f\x2a\xe1\x5a\x7a\x4a\xd0\x22\x57\xcc\x08\x00\x4f\x49\x44\x94\x28\x65\x02\xe7\x6d\x20\x4a\xd3\xe4\x5e\xac\x40\xce\x73\xb1\xb6\xf1\xa0\x57\x65\x0d\x4e\xcf\x8e\x4e\x4e\xcf\x8e\x7f\x9e\x66\x62\x1d\xa5\x22\x62\x11\xc7\x74\xd3\x9c\xfd\x01\x51\xa2\xd4\x69\xd4\xd9\x8e\xda\x28\x22\x9a\x48\xa1\x54\x74\x27\xc5\x5a\x81\x54\x3f\xa2\xc8\x1a\x64\xf4\xfa\xe8\xf5\xd1\xf1\xc9\x5f\x6c\x58\x8d\xb0\x13\xdc\x15\xaf\x1a\xc5\x14\x27\xec\x8f\x31\x9b\xf8\xf5\xcc\xdd\x91\x4a\x24\x50\x0d\xf5\x50\x86\x41\xca\x56\xc1\x81\x2f\xdf\x79\x51\xa8\xe8\x37\x9a\x79\x05\x9d\x40\x70\x1e\x78\x09\x0b\x26\x43\xe9\x8f\x33\x57\x5c\xf4\xe4\x6d\xd2\xc5\xcc\xdd\x18\x61\x9c\xac\x4c\xef\x88\x3c\x25\x1f\x0b\x90\x74\x68\xf4\x46\xfc\x31\x7b\x51\x14\xbf\xc1\xdd\x3d\xd3\x9e\xce\xba\xb7\x84\xae\x03\x4f\x71\x5b\x43\xa6\xad\x01\x36\x70\xc8\x4c\x68\x4e\x7a\xfa\x63\x68\xb0\xd5\x79\x1c\x67\x54\x7d\x5c\xf3\x4f\x52\xe0\x26\xf4\x26\x64\x07\xe4\xa7\x9f\xb0\x1c\xb1\xd2\x9b\x1c\x3e\xb3\x2f\xe4\x87\x8b\x0b\xdb\xf7\x73\xc6\x21\xed\x5b\x33\x2f\x09\xba\x94\x9e\x4f\x54\xf3\xc7\x75\xdb\x8d\x65\x17\x6e\xad\x37\xa7\xb9\x82\x66\x56\xcd\xbb\x69\x0f\xbf\xc5\x2f\x76\x76\xd5\x1b\x67\x8c\xa6\xe4\x1f\xa0\x09\xe5\x15\xd2\x04\x8a\x68\x2a\x11\xdb\x71\x33\xb6\x8f\xf0\x49\x4a\x74\x06\xed\x6f\x55\x40\xc2\xe6\x0c\x52\x72\xb7\xb1\x0f\xf6\x53\xaa\x69\x54\x69\xed\x13\xaa\xb5\x64\x77\xa5\x06\xbf\xbf\xf1\xd9\xcc\x4a\xa8\x21\xcc\xd9\xc8\xab\x87\xa6\x2b\xb7\x0e\xf6\x1b\x51\x5c\xab\x3e\xbf\x7e\x45\x08\xe2\x29\x0e\xa7\xfd\xdd\x89\xd5\xca\xb8\x5c\xf9\x68\x34\xe2\xa4\x94\x12\x3f\xeb\x55\xd4\xaf\x96\x95\x4c\xea\x29\xf1\x4f\x2a\xb3\x91\xd6\x42\xdf\xa8\x39\xf0\xde\x36\x9b\xc3\xe9\xea\x36\xed\x9e\x56\x8d\x96\x67\x2a\xec\x7e\x1d\x90\xbf\xef\x3a\x03\x5d\xa1\x73\xb7\xbe\x6e\xb7\x54\xe6\xdd\xba\xbb\x55\x34\xe5\x28\x04\x9e\x2f\x9a\xd1\x9c\x2c\xe9\x03\xc9\x80\x2d\x32\x4d\xc4\xdc\x56\xb8\xda\xf4\xa0\x32\x37\xf4\xe1\xbd\x95\x0b\x6b\x09\xb7\x3a\x68\xfa\xd6\x41\x4a\x04\x4a\x7e\x7c\xb2\xb2\xf8\x88\xd0\xe7\x22\x9f\x16\xd1\x5c\x8a\x65\x44\x4b\x2d\xa6\x5e\x62\xcd\xf1\x55\x79\x30\xa5\xa9\x7c\x54\xa3\x12\x57\x01\x3a\x25\x1f\x79\x6a\xce\x28\x63\x34\xf0\xcb\xb5\x6c\xc2\xc6\xe7\xb8\x8b\x4b\xb1\x2c\xb0\x34\xe9\xad\xd1\x6c\x77\xf2\x5c\x07\x5d\x88\x43\x51\x31\x9f\x2b\xd0\xf5\x53\x93\x10\x84\x8c\x04\xb0\x26\x05\x65\x75\x3a\x9d\x1a\xb5\x61\x8d\x55\xe9\x57\x26\x81\x50\x67\x88\x6c\x47\xee\x8d\x27\x7a\x23\xca\xa5\x31\xc4\x85\xe6\x00\x69\x75\x0a\xda\xcc\xfb\x25\x9c\xa3\xd1\x99\x64\x8b\x05\xd2\x8a\x3a\xe6\x49\x65\x78\xb6\x29\xc0\x2d\xa6\x81\xb1\xfe\x79\x31\xc6\x3a\x2c\xe9\xab\x87\x6f\x4c\x3e\x0c\xde\xcf\x6e\xae\xed\x57\x15\xf4\xd9\x88\x9d\x31\xc6\x99\xae\x44\xdb\x40\x26\x88\x47\x25\xbe\xdb\xd6\xee\x2b\xd5\xa9\x4e\x99\x2a\xa8\x4e\x32\x47\xd5\x91\xdc\xa2\x9c\x82\x3e\x43\xaa\x55\x4d\x16\xea\xe0\xf0\x10\x20\xaf\x9c\x0c\x38\x16\x1a\x76\xd3\x15\xa5\xe5\x11\x97\x22\xcf\x69\x81\xf6\xa9\x4d\x6b\xb3\x7c\x1c\xdb\xd9\xca\x91\xb8\xd9\x39\xca\xf3\xc6\x25\x62\x65\x46\x11\x21\xb1\xa4\x49\xa3\xab\xab\x3a\x34\x1c\x84\x9c\xc4\xe4\x6d\x9a\x12\x4b\xf6\xea\x94\xe6\x35\x05\x24\x5a\x98\x89\x55\x2d\xb6\xb6\x4a\xa7\x31\xf9\x2d\x03\x5e\x69\x41\x3a\x21\x49\x46\xf9\x02\x7a\xd0\x8c\x58\x6d\x69\x1c\xe1\x86\xc7\x99\xd1\x23\xfb\x4d\x1c\xfb\xc6\x78\xf3\x8b\xf1\xc5\x7e\x63\xfa\xe7\xda\x74\xb5\x47\x12\x36\x0a\x07\x04\x89\x1a\xb6\x56\x91\x83\x86\x97\x3b\x34\x2e\x5c\x97\x80\xe7\x69\xeb\xf3\x2c\x26\xef\xec\x56\x89\xa1\xb1\x52\xa1\x7d\x16\x43\xec\x0b\x93\xe8\x6f\xbe\x35\xe7\x37\xec\x8f\x53\xba\x5b\xe4\x63\x38\x4d\x7e\x94\xfe\x6c\x28\x14\xe9\x86\xa2\xae\x8e\xdb\xee\x4d\xfb\xd8\x9d\x19\x76\x1e\x4b\x58\x22\x0d\x44\x82\x5e\x3b\xf7\x6e\x23\x03\x69\x24\xf6\xad\x28\xc6\xed\x1d\x06\x95\xb7\x47\x4c\xa7\x63\xe2\xca\x3b\x68\xa8\x64\x34\x82\x87\x02\xcf\x61\x30\xac\xca\xcc\x90\xa3\xe4\xe1\xb4\x57\xaa\x1a\xda\xb0\x28\x0c\x3b\x15\x51\x89\x2d\xcb\x65\xbd\xfa\x14\x1a\x8e\x1e\x0a\xe3\x4e\x2f\xcd\x40\x98\xda\x36\xcd\x83\xa4\xb5\xcd\x3e\x9d\x6b\xd3\xe7\x19\x38\x54\x84\x20\x77\x42\xc8\xe2\x4c\x65\x90\x7a\xc8\xe4\xd1\x97\xc1\x45\xa8\x8e\x74\x70\x91\xf2\xb4\x9c\xeb\xd4\x18\xe9\x6a\x63\x1c\xee\xc9\xe2\xc2\x10\x9c\x46\x21\xc7\x00\x39\xb2\xc6\x86\xd9\x57\x30\x90\x22\xea\x20\x3d\x2a\x8b\x42\x48\xed\x51\xed\x10\xe2\x45\x4c\x3e\x5c\xbd\xb6\x64\x0a\x6f\x17\xd8\x81\xbe\xe3\x47\xe2\xda\x8e\x9c\x22\xef\xf1\x6a\xf7\x44\xdf\x9b\xdb\xdf\x77\xed\xfb\x46\x9a\xf1\x3f\x71\x3e\x5c\xe1\x6f\x19\x8e\x7e\xf5\xdc\x46\xfd\x37\x22\xed\x70\x3e\x9e\x31\x09\x2f\x24\x16\xcf\x64\x0b\xbb\x88\xce\x51\xf1\x10\x8c\x31\x87\xcb\x0a\x91\x6d\xae\x40\x11\xc1\x13\x6f\xa8\x1c\xf4\xf6\x1b\x61\xd0\x5a\x2f\xe9\x81\x5e\xc1\x1e\xaf\xee\x68\xc3\x7c\x7b\xbd\x2e\x33\xc0\x23\x73\x9d\x01\xc2\x87\xf4\xae\x20\xf6\x2f\x05\x6c\xf0\x14\xb8\x87\x1f\xa3\x29\x35\x17\x31\x9b\xd4\x5d\x80\xd2\xdb\x8c\xdf\xcf\x8f\x55\xaa\x47\x49\x3d\x6a\x61\xd0\x18\xc7\x53\xd7\xc8\xe8\x11\x0b\x62\xee\xfb\x66\x39\x13\x0a\x76\xb0\xf2\x54\x34\x6c\x64\x78\x5f\x7a\xea\x2f\x21\xff\x3e\x35\xb8\x79\x3d\xe3\xce\xd3\x2d\x8e\x97\xc6\x30\x1a\x7b\xf5\x33\xe7\xb6\x43\x09\xd6\x59\xb7\x1f\x65\x79\xd1\x68\x9d\x3a\xf3\x4e\xf2\x13\xc1\x35\x0e\x88\xaa\x2a\xd0\x2f\x96\x85\xb3\x4e\x6f\x32\xb8\x9e\x3d\x05\xd9\x96\x07\x3c\xd7\xc0\x93\x97\x6d\xef\xea\xfc\x3c\x42\x68\xb1\x9f\xee\xa0\x82\xaa\xbd\xc2\x37\x83\x77\x97\x83\x49\xcb\xce\xbf\x4c\xdf\xe6\x79\x18\x7c\xae\x6e\xa1\x62\xb1\xc8\xe1\xa2\xf1\xf8\xa5\xe9\x5f\xfb\xc7\x86\xfd\xd7\x08\xad\x1c\x4d\x48\x0e\xdc\x7c\xeb\x79\x88\x71\x79\xa1\xb3\x37\x28\xf5\x57\x2b\x82\xdf\x5e\xbd\x72\xf3\xdf\x53\xf8\xcc\xbe\xc4\x88\x3e\x76\x17\x17\x4e\xa3\x36\xf9\xd9\x1e\x60\x33\xfe\x3f\x00\x00\xff\xff\x84\x02\x75\x23\xda\x16\x00\x00")

func js_application_js_bytes() ([]byte, error) {
	return bindata_read(
		_js_application_js,
		"js/application.js",
	)
}

func js_application_js() (*asset, error) {
	bytes, err := js_application_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/application.js", size: 5850, mode: os.FileMode(420), modTime: time.Unix(1419796430, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _css_application_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8d\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\x23\x0c\x41\x4c\x80\xc2\xc2\x55\x9c\x26\x14\x8b\xc4\x8e\x4c\x0a\x45\x28\x77\x47\x2d\x11\x62\x62\x7d\x7e\xcf\xff\x94\x82\x27\x84\x55\xc2\xc9\x3c\xc8\x97\x8b\x85\xfd\xee\x90\xa7\x35\xbc\x3a\x80\xcd\x59\x34\x99\x5e\xb8\xa8\xc4\x85\x00\x34\x0b\xc7\x22\xc7\x05\x78\xba\xe5\x88\x4f\x0b\xc4\x91\x38\x18\x17\xa5\xbf\xce\xa7\xfa\xfd\x30\xa8\x8c\xb9\xf5\xff\x75\xc6\xbb\x43\x35\x73\xd5\xfc\x84\x3a\x10\x9b\x22\xd9\xc2\xf6\xb3\xe8\x44\x7d\xd0\x1f\x54\xbb\xfa\x0e\x00\x00\xff\xff\xba\xd2\xfd\xa0\xc9\x00\x00\x00")

func css_application_css_bytes() ([]byte, error) {
	return bindata_read(
		_css_application_css,
		"css/application.css",
	)
}

func css_application_css() (*asset, error) {
	bytes, err := css_application_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "css/application.css", size: 201, mode: os.FileMode(420), modTime: time.Unix(1419797152, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/about.html": tmpl_about_html,
	"tmpl/base.html": tmpl_base_html,
	"tmpl/edit.html": tmpl_edit_html,
	"tmpl/home.html": tmpl_home_html,
	"tmpl/view.html": tmpl_view_html,
	"js/application.js": js_application_js,
	"css/application.css": css_application_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"css": &_bintree_t{nil, map[string]*_bintree_t{
		"application.css": &_bintree_t{css_application_css, map[string]*_bintree_t{
		}},
	}},
	"js": &_bintree_t{nil, map[string]*_bintree_t{
		"application.js": &_bintree_t{js_application_js, map[string]*_bintree_t{
		}},
	}},
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"about.html": &_bintree_t{tmpl_about_html, map[string]*_bintree_t{
		}},
		"base.html": &_bintree_t{tmpl_base_html, map[string]*_bintree_t{
		}},
		"edit.html": &_bintree_t{tmpl_edit_html, map[string]*_bintree_t{
		}},
		"home.html": &_bintree_t{tmpl_home_html, map[string]*_bintree_t{
		}},
		"view.html": &_bintree_t{tmpl_view_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

